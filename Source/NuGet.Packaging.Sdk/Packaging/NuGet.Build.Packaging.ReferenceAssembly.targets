<Project>

	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.ApiIntersect" AssemblyFile="$(NuGetPackagingTaskAssemblyFile)"/>
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.GenerateAssemblyInfo" AssemblyFile="$(NuGetPackagingTaskAssemblyFile)"/>
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.GetApiIntersectTargetPaths" AssemblyFile="$(NuGetPackagingTaskAssemblyFile)"/>

	<ItemGroup>
		<!-- Converts potentially multiple $(ReferenceAssemblyFrameworks) into @(ReferenceAssemblyFramework) -->
		<ReferenceAssemblyFramework Include="$(ReferenceAssemblyFrameworks)" Condition="'$(ReferenceAssemblyFrameworks)' != ''"/>
	</ItemGroup>

	<PropertyGroup>
		<CleanDependsOn>$(CleanDependsOn);_CleanReferenceAssemblyInterimOutputs</CleanDependsOn>
	</PropertyGroup>

	<Target Name="_GetReferenceAssemblyTargetPaths"
			BeforeTargets="GetPackageContents"
			DependsOnTargets="AssignProjectConfiguration;_SplitProjectReferencesByFileExistence"
			Condition="'@(ReferenceAssemblyFramework)' != ''">
		<ItemGroup>
			<_ReferenceAssemblyProjects Include="@(_MSBuildProjectReferenceExistent)" Condition="'%(_MSBuildProjectReferenceExistent.Pack)' != 'false'"/>
		</ItemGroup>

		<MSBuild
			Projects="@(_ReferenceAssemblyProjects)"
			Targets="GetTargetPathWithTargetPlatformMoniker">
			<Output TaskParameter="TargetOutputs" ItemName="IntersectionAssembly"/>
		</MSBuild>

		<GetApiIntersectTargetPaths
			Frameworks="%(ReferenceAssemblyFramework.Identity)"
			RootOutputDirectory="$(InterimOutputPath)"
			Assemblies="@(IntersectionAssembly)">
			<Output TaskParameter="TargetPaths" ItemName="_ReferenceAssemblyTargetPath"/>
		</GetApiIntersectTargetPaths>

		<ItemGroup>
			<PackageFile Include="@(_ReferenceAssemblyTargetPath)">
				<Kind>Lib</Kind>
				<Source>Implicit</Source>
				<TargetFrameworkMoniker>%(_ReferenceAssemblyTargetPath.TargetFrameworkMoniker)</TargetFrameworkMoniker>
			</PackageFile>
		</ItemGroup>
	</Target>

	<Target Name="_GenerateReferenceAssemblies"
			BeforeTargets="Pack"
			DependsOnTargets="_GetReferenceAssemblyTargetPaths"
			Condition="'@(ReferenceAssemblyFramework)' != ''"
			Inputs="@(IntersectionAssembly)"
			Outputs="@(_ReferenceAssemblyTargetPath)">

		<PropertyGroup>
			<EnableDefaultIntersectionAssemblyReferencePath Condition="'$(EnableDefaultIntersectionAssemblyReferencePath)' == ''">true</EnableDefaultIntersectionAssemblyReferencePath>
			<IntersectionIgnoreUnresolvedAssemblies Condition="'$(IntersectionIgnoreUnresolvedAssemblies)' == ''">true</IntersectionIgnoreUnresolvedAssemblies>
		</PropertyGroup>

		<ItemGroup>
			<_IntersectionReferencePath Include="@(IntersectionAssembly->'%(RootDir)%(Directory)')" Condition="'$(EnableDefaultIntersectionAssemblyReferencePath)' == 'true'"/>
			<_IntersectionReferencePath Include="$(IntersectionAssemblyReferencePath)"/>
		</ItemGroup>

		<ApiIntersect
			Framework="%(ReferenceAssemblyFramework.Identity)"
			RootOutputDirectory="$(InterimOutputPath)"
			IntersectionAssembly="@(IntersectionAssembly)"
			ReferencePath="@(_IntersectionReferencePath)"
			ExcludeType="$(IntersectionExcludeType)"
			RemoveAbstractTypeMembers="$(IntersectionRemoveAbstractTypeMembers)"
			ExcludeAssembly="@(IntersectionExcludeAssembly)"
			KeepInternalConstructors="$(IntersectionKeepInternalConstructors)"
			KeepMarshalling="$(IntersectionKeepMarshalling)"
			IgnoreUnresolvedAssemblies="$(IntersectionIgnoreUnresolvedAssemblies)"
			ToolPath="$(ApiIntersectToolPath)"
			ToolExe="$(ApiIntersectToolExe)">
			<Output TaskParameter="OutputDirectory" ItemName="_ReferenceAssemblyBuildInfo"/>
		</ApiIntersect>

		<GenerateAssemblyInfo
			Assemblies="@(IntersectionAssembly)"
			OutputDirectories="@(_ReferenceAssemblyBuildInfo->'%(Identity)Contract')">
			<Output TaskParameter="AssemblyName" PropertyName="_ReferenceAssemblyName"/>
		</GenerateAssemblyInfo>

		<MSBuild
			Projects="$(NuGetPackagingToolsPath)GenerateReferenceAssembly.csproj"
			Properties="AssemblyName=$(_ReferenceAssemblyName);
				TargetFrameworkVersion=%(_ReferenceAssemblyBuildInfo.TargetFrameworkVersion);
				TargetFrameworkProfile=%(_ReferenceAssemblyBuildInfo.TargetFrameworkProfile);
				SrcDir=%(_ReferenceAssemblyBuildInfo.FullPath);
				FinalOutputPath=%(_ReferenceAssemblyBuildInfo.FullPath)$(FinalOutputFolder)\;
				InterimOutputPath=%(_ReferenceAssemblyBuildInfo.FullPath)$(InterimOutputFolder)\"/>
	</Target>

	<Target Name="_CleanReferenceAssemblyInterimOutputs" Condition="'@(ReferenceAssemblyFramework)' != '' AND Exists('$(InterimOutputPath)')">
		<PropertyGroup>
			<_ReferenceAssemblyInterimOutputDirectories>$([System.IO.Directory]::GetDirectories('$(InterimOutputPath)'))</_ReferenceAssemblyInterimOutputDirectories>
		</PropertyGroup>

		<ItemGroup>
			<_ReferenceAssemblyInterimOutputDirectory Include="$(_ReferenceAssemblyInterimOutputDirectories)"/>
		</ItemGroup>

		<RemoveDir Directories="@(_ReferenceAssemblyInterimOutputDirectory)"/>
	</Target>

</Project>