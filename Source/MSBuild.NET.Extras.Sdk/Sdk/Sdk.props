<Project>

	<PropertyGroup Label="Globals">
		<!--
			Indicate to other targets that 'MSBuild.NET.Extras.Sdk' is being used.
			This must be set here (as early as possible, before Common props)
			so that everything that follows can depend on it.

			In particular, 'Directory.Build.props' and 'Directory.Packages.props'
			are imported by Common props. They need to be able to use the
			following flag (property) to enable build customization.
		-->
		<UsingMSBuildNETExtrasSdk>true</UsingMSBuildNETExtrasSdk>
	</PropertyGroup>

	<!-- Import Fixed up Project Extensions logic for WPF/WFF -->
	<PropertyGroup Condition="'$(MSBuildAssemblyVersion)' &lt; '16.0'">
		<CustomBeforeMicrosoftCommonProps>$(MSBuildThisFileDirectory)..\Extensions\MSBuild.ProjectExtensions.Common.props</CustomBeforeMicrosoftCommonProps>
		<CustomAfterMicrosoftCommonProps>$(MSBuildThisFileDirectory)..\Extensions\MSBuild.ProjectExtensions.props</CustomAfterMicrosoftCommonProps>
	</PropertyGroup>

	<Import Sdk="Microsoft.NET.Sdk" Project="Sdk.props"/>

	<!--
		Detect the SDK version. For now, we have to check the 'NETCoreSdkVersion' property for .NET 5+ SDKs
		else check 'BundledNETCoreAppTargetFrameworkVersion' property for Sdk <= 2.1.200
		else Give 1.0 version since those properties don't exist in 1.x Sdks
	-->
	<PropertyGroup>
		<!-- Handle SemVer version like 3.1.300-preview and 2.1.200, since MSBuild compares only first 2 version parts. -->
		<NETSdkVersion Condition="$(NETCoreSdkVersion.Contains('.'))">$(NETCoreSdkVersion.Split('.')[0]).$(NETCoreSdkVersion.Split('.')[1])</NETSdkVersion>
		<NETSdkVersion Condition="'$(NETSdkVersion)' == ''">$(BundledNETCoreAppTargetFrameworkVersion)</NETSdkVersion>
		<NETSdkVersion Condition="'$(NETSdkVersion)' == ''">1.0</NETSdkVersion>
	</PropertyGroup>

	<Import Project="..\Build\MSBuild.NET.Extras.Sdk.props"/>
	<Import Project="..\DefaultItems\MSBuild.NET.ImplicitPackages.props"/>

</Project>