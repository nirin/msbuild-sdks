<Project>

	<Import Project="MSBuild.NET.PlatformResolver.props"/>

	<!-- Add conditional compilation symbols for the target framework and one with version -->
	<PropertyGroup Condition="'$(DisableImplicitFrameworkDefines)' != 'true'">
		<ImplicitFrameworkIdentifierDefine>$(TargetFrameworkIdentifier.TrimStart('.').Replace('.','_').ToUpperInvariant())</ImplicitFrameworkIdentifierDefine>
		<ImplicitFrameworkDefine>$(TargetFramework.Replace('.','_').Replace('-','_').ToUpperInvariant())</ImplicitFrameworkDefine>
	</PropertyGroup>

	<PropertyGroup>
		<PlatformProps Condition="'$(PlatformProps)' == ''">Platforms\$(_PlatformImportId).props</PlatformProps>
		<PlatformTargets Condition="'$(PlatformTargets)' == ''">Platforms\$(_PlatformImportId).targets</PlatformTargets>
	</PropertyGroup>

	<Import Project="$(PlatformProps)" Condition="Exists('$(PlatformProps)')"/>

	<PropertyGroup Condition="'$(DisableImplicitFrameworkDefines)' != 'true' AND '$(_LanguageSourceName)' != 'VisualBasic'">
		<DefineConstants Condition="'$(DefineConstants)' != '' AND !$(DefineConstants.EndsWith(';'))">$(DefineConstants);</DefineConstants>
		<DefineConstants>$(DefineConstants)$(ImplicitFrameworkProfileDefine)</DefineConstants>
	</PropertyGroup>

	<PropertyGroup Condition="'$(DisableImplicitFrameworkDefines)' != 'true' AND '$(_LanguageSourceName)' == 'VisualBasic'">
		<DefineConstants Condition="'$(DefineConstants)' != '' AND !$(DefineConstants.EndsWith(','))">$(DefineConstants),</DefineConstants>
		<DefineConstants Condition="'$(ImplicitFrameworkProfileDefine)' != ''">$(DefineConstants)$(ImplicitFrameworkProfileDefine)=-1</DefineConstants>
	</PropertyGroup>

	<!-- Make sure the conditional compilation symbols defined above and in the platform targets should flow to the Main SDK -->
	<PropertyGroup Condition="'$(DisableImplicitFrameworkDefines)' != 'true'">
		<DisableImplicitFrameworkDefines>true</DisableImplicitFrameworkDefines>
		<VersionlessImplicitFrameworkDefine>$(ImplicitFrameworkIdentifierDefine)</VersionlessImplicitFrameworkDefine>
	</PropertyGroup>

	<ItemGroup Condition="'$(DisableImplicitFrameworkReferences)' != 'true'">
		<!-- Set 'Pack=false' on implicit references so they don't get added to NuGet packages as framework assemblies -->
		<_ImplicitReference Update="@(_ImplicitReference)" Pack="false" Publish="false"/>
		<!--
			Don't duplicate any references that are explicit in the project file.
			This means that if you do want to include a framework assembly in your NuGet package,
			you can just add the Reference to your project file.
		-->
		<_ImplicitReference Remove="@(Reference)"/>

		<!-- Add the implicit references to 'Reference' -->
		<Reference Include="@(_ImplicitReference)"/>

		<!-- Cleanup the Temporary list -->
		<_ImplicitReference Remove="@(_ImplicitReference)"/>
	</ItemGroup>

	<!-- Update '*TargetFrameworkVersion*' properties. Since, we might have updated 'TargetFrameworkVersion' again within platform targets -->
	<PropertyGroup Condition="'$(TargetFrameworkVersion)' != ''">
		<_TargetFrameworkVersionWithoutV>$(TargetFrameworkVersion.TrimStart('vV'))</_TargetFrameworkVersionWithoutV>
		<_TargetFrameworkVersionWithV>v$(_TargetFrameworkVersionWithoutV)</_TargetFrameworkVersionWithV>
		<TargetFrameworkVersion>$(_TargetFrameworkVersionWithV)</TargetFrameworkVersion>
	</PropertyGroup>

	<PropertyGroup Condition="Exists('$(PlatformTargets)')">
		<LanguageTargets>$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '$(PlatformTargets)'))</LanguageTargets>
	</PropertyGroup>

</Project>