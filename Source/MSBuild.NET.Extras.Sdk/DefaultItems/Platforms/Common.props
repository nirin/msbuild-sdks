<Project>

	<ItemDefinitionGroup>
		<_ImplicitReference>
			<IsImplicitlyDefined>true</IsImplicitlyDefined>
		</_ImplicitReference>
	</ItemDefinitionGroup>

	<ItemDefinitionGroup>
		<Compile>
			<SubType>Code</SubType>
		</Compile>
		<EmbeddedResource>
			<SubType>Designer</SubType>
			<Generator>$(DefaultGeneratorTool)</Generator>
		</EmbeddedResource>
	</ItemDefinitionGroup>

	<PropertyGroup>
		<!-- LCID RegEx: (?:\.([a-z]{2,3})(?:-([A-Z][a-z]{3}|[a-z]{3,5}))?(?:-([A-Z]{2}))?)$ for LCIDs -->
		<LangIdRegEx>(?:\.([a-z]{2,3})(?:-([A-Z][a-z]{3}|[a-z]{3,5}))?(?:-([A-Z]{2}))?)%24</LangIdRegEx>
	</PropertyGroup>

	<!--
		HACK: WORST HACK IN THE HISTORY OF HACKS!
		TODO: Replace with a more elegant solution without involving RegEx if it's even pssible!
	-->
	<ItemGroup Condition="'$(EnableDefaultEmbeddedResourceItems)' == 'true' AND '$(EnableEmbeddedResourceCodeGenerator)' == 'true'">
		<EmbeddedResource Update="**\*.resx">
			<HasLangId>$([System.Text.RegularExpressions.Regex]::IsMatch('%(FileName)', '$(LangIdRegEx)'))</HasLangId>
		</EmbeddedResource>
		<EmbeddedResource Update="**\*.resx">
			<Generator Condition="!%(HasLangId)">$(EmbeddedResourceCodeGeneratorTool)</Generator>
			<LastGenOutput Condition="!%(HasLangId)">%(Filename)$(DefaultDesignerFileSuffix)$(DefaultLanguageSourceExtension)</LastGenOutput>
			<LastGenOutputPath Condition="!%(HasLangId)">%(RecursiveDir)</LastGenOutputPath>
			<DependentUpon Condition="%(HasLangId)">$([System.Text.RegularExpressions.Regex]::Replace('%(FileName)', '$(LangIdRegEx)', '%(Extension)'))</DependentUpon>
		</EmbeddedResource>
		<Compile Update="@(EmbeddedResource->'%(LastGenOutputPath)%(LastGenOutput)')">
			<AutoGen>true</AutoGen>
			<DesignTime>true</DesignTime>
			<DesignTimeSharedInput>true</DesignTimeSharedInput>
			<DependentUpon>$([MSBuild]::ValueOrDefault('%(Filename)', '').Replace('$(DefaultDesignerFileSuffix)', '.resx'))</DependentUpon>
		</Compile>
	</ItemGroup>

</Project>