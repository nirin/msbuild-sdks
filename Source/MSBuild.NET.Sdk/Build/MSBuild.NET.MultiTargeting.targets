<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- ============================== Microsoft.<Language>.CrossTargeting.targets ============================== -->

	<!-- Import design time targets for the Roslyn Project System. These are only available if Visual Studio is installed. -->
	<PropertyGroup>
		<DesignTimeLanguageTargets Condition="'$(DesignTimeLanguageTargets)'==''">$(MSBuildExtensionsPath)\Microsoft\VisualStudio\Managed\Microsoft.$(SourceLanguageName).DesignTime.targets</DesignTimeLanguageTargets>
	</PropertyGroup>

	<Import Project="$(DesignTimeLanguageTargets)" Condition="'$(DesignTimeLanguageTargets)' != '' AND Exists('$(DesignTimeLanguageTargets)')"/>

	<!-- ============================== Microsoft.Common.CrossTargeting.targets ============================== -->

	<PropertyGroup>
		<BuildInParallel Condition="'$(BuildInParallel)' == ''">true</BuildInParallel>
	</PropertyGroup>

	<Target Name="GetTargetFrameworks"
			Returns="@(_ThisProjectBuildMetadata)">
		<ItemGroup>
			<_ThisProjectBuildMetadata Include="$(MSBuildProjectFullPath)">
				<TargetFrameworks Condition="'$(TargetFrameworks)' != ''">$(TargetFrameworks)</TargetFrameworks>
				<TargetFrameworks Condition="'$(TargetFrameworks)' == ''">$(TargetFramework)</TargetFrameworks>
				<HasSingleTargetFramework>true</HasSingleTargetFramework>
				<HasSingleTargetFramework Condition="'$(IsMultiTargetingBuild)' == 'true'">false</HasSingleTargetFramework>
				<!-- indicate to caller that project is RID agnostic so that a global property RuntimeIdentifier value can be removed -->
				<IsRidAgnostic>false</IsRidAgnostic>
				<IsRidAgnostic Condition="'$(RuntimeIdentifier)' == '' AND '$(RuntimeIdentifiers)' == ''">true</IsRidAgnostic>
			</_ThisProjectBuildMetadata>
		</ItemGroup>
	</Target>

	<Target Name="_ComputeTargetFrameworkItems" Returns="@(InnerOutput)">
		<ItemGroup>
			<_TargetFramework Include="$(TargetFrameworks)"/>
			<_InnerBuildProjects Include="$(MSBuildProjectFile)">
				<AdditionalProperties>TargetFramework=%(_TargetFramework.Identity)</AdditionalProperties>
			</_InnerBuildProjects>
		</ItemGroup>
	</Target>

	<!--
	============================================================
						DispatchToInnerBuilds

		Builds this project with /t:$(InnerTarget) /p:TargetFramework=X for each
		value X in $(TargetFrameworks)

		[IN]
		$(TargetFrameworks) - Semicolon delimited list of target frameworks.
		$(InnerTargets) - The targets to build for each target framework

		[OUT]
		@(InnerOutput) - The combined output items of the inner targets across
						 all target frameworks..
	============================================================
	-->
	<Target Name="DispatchToInnerBuilds"
			DependsOnTargets="_ComputeTargetFrameworkItems"
			Returns="@(InnerOutput)">
		<!-- If this logic is changed, also update Clean -->
		<MSBuild Projects="@(_InnerBuildProjects)"
				 Condition="'@(_InnerBuildProjects)' != ''"
				 Targets="$(InnerTargets)"
				 BuildInParallel="$(BuildInParallel)">
			<Output ItemName="InnerOutput" TaskParameter="TargetOutputs"/>
		</MSBuild>
	</Target>

	<!--
	============================================================
								Build

	Multi-targeting version of Build.

	[IN]
	$(TargetFrameworks) - Semicolon delimited list of target frameworks.

	$(InnerTargets)     - The targets to build for each target framework. Defaults
						  to 'Build' if unset, but allows override to support
						  `msbuild /p:InnerTargets=X;Y;Z` which will build X, Y,
						  and Z targets for each target framework.

	[OUT]
	@(InnerOutput) - The combined output items of the inner targets across
						all builds.
	============================================================
	-->
	<Target Name="Build" DependsOnTargets="_SetBuildInnerTarget;DispatchToInnerBuilds"/>

	<Target Name="_SetBuildInnerTarget" Returns="@(InnerOutput)">
		<PropertyGroup Condition="'$(InnerTargets)' == ''">
			<InnerTargets>Build</InnerTargets>
		</PropertyGroup>
	</Target>

	<!--
	============================================================
							Clean

	Multi-targeting version of clean.

	Inner-build dispatch is a clone of DispatchToInnerBuilds;
	the only reason it's replicated is that it must be a different
	target to be run in the same build (e.g. by Rebuild or by
	a /t:Clean;Build invocation.
	============================================================
	-->
	<Target Name="Clean"
			DependsOnTargets="_ComputeTargetFrameworkItems">
		<!-- If this logic is changed, also update DispatchToInnerBuilds -->
		<MSBuild Projects="@(_InnerBuildProjects)"
				 Condition="'@(_InnerBuildProjects)' != ''"
				 Targets="Clean"
				 BuildInParallel="$(BuildInParallel)"/>
	</Target>

	<!--
	============================================================
							Rebuild

	Multi-targeting version of rebuild.
	============================================================
	-->
	<Target Name="Rebuild" DependsOnTargets="Clean;Build"/>

	<!-- ============================== Microsoft.NET.Sdk.CrossTargeting.targets ============================== -->

	<Import Project="$(MSBuildThisFileDirectory)MSBuild.NET.BuildTargeting.targets"/>

	<!--
	============================================================
							Publish

		This is the Publish target for multi-targeting.
		Currently it is unsupported to publish for multiple target frameworks
		because users can specify the $(PublishDir), and publish would put
		multiple published applications in a single directory.
	============================================================
	 -->
	<Target Name="Publish">
		<Error Text="The 'Publish' target is not supported without specifying a target framework. The current project targets multiple frameworks, please specify the framework for the published application."/>
	</Target>

	<!--
	============================================================
						GetAllRuntimeIdentifiers

		Outer build implementation of GetAllRuntimeIdentifiers returns
		a union of all runtime identifiers used across inner and outer
		build evaluations.

		It is further set to run before '_GenerateRestoreProjectSpec'
		(note that running only 'Restore' is too late and will not work
		with solution level restore). This ensures that any conditioning
		of runtime  identifiers against TargetFramework does not prevent
		restore from providing  the necessary RID-specific assets for all
		inner builds.

		It also brings parity to VS vs. command line behaviour in this
		scenario because VS passes all of the information from each
		configured inner build to restore, whereas command-line restore
		without this target would only use the runtime identifiers that
		are statically set in the outer evaluation.
	============================================================
	-->
	<Target Name="GetAllRuntimeIdentifiers"
			Returns="$(RuntimeIdentifiers)"
			BeforeTargets="_GenerateRestoreProjectSpec">

		<ItemGroup>
			<_GetAllRuntimeIdentifiersTargetFrameworks Include="$(TargetFrameworks)"/>
			<_AllRuntimeIdentifiers Include="$(RuntimeIdentifiers);$(RuntimeIdentifier)"/>
		</ItemGroup>

		<MSBuild Projects="$(MSBuildProjectFile)"
				 Targets="GetAllRuntimeIdentifiers"
				 Properties="TargetFramework=%(_GetAllRuntimeIdentifiersTargetFrameworks.Identity)">
			<Output ItemName="_AllRuntimeIdentifiers" TaskParameter="TargetOutputs"/>
		</MSBuild>

		<PropertyGroup>
			<RuntimeIdentifiers>@(_AllRuntimeIdentifiers->Distinct())</RuntimeIdentifiers>
		</PropertyGroup>
	</Target>

	<!--
	============================================================
						GetPackagingOutputs

		Stub multi-targeting implementation of GetPackagingOutputs
		to allow project references from from projects that pull in
		Microsoft.AppxPackage.targets (UWP, PCL) to multi-targeted
		projects.

		Ultimately, the appx targets should be modified to use the
		same P2P TFM negotiation protocol as Microsoft.Common.targets
		so that they can forward to the TFM-specific GetPackagingOutputs
		of the appropriate inner build. This stub would not have any
		bad interaction with that change, which would happily bypass
		this implementation altogether.

		An empty GetPackagingOutputs is sufficient for the common
		case of a library with no special assets to contribute to
		the appx and is also equivalent to what is present in the
		single-targeted case unless WindowsAppContainer is not set
		to true.

		Furthermore, the appx targets currently use continue-on-error
		such that even without this, clean builds succeed but log an
		error and incremental builds silently succeed. As such, this
		simply removes a confounding error from successful clean
		builds.

	============================================================
	-->
	<Target Name="GetPackagingOutputs"/>

	<PropertyGroup>
		<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
	</PropertyGroup>

</Project>