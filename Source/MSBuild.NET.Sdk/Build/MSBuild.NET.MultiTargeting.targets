<Project>

	<Import Sdk="MSBuild.NET.Legacy.Sdk" Project="Microsoft.$(SourceLanguageName).targets"/>

	<!--
	============================================================
							Publish

		This is the Publish target for multi-targeting.
		Currently it is unsupported to publish for multiple target frameworks
		because users can specify the $(PublishDir), and publish would put
		multiple published applications in a single directory.
	============================================================
	 -->
	<Target Name="Publish" Condition="'$(IsPublishable)' != 'false'">
		<Error Text="The 'Publish' target is not supported without specifying a target framework. The current project targets multiple frameworks, please specify the framework for the published application."/>
	</Target>

	<!--
	============================================================
						GetAllRuntimeIdentifiers

		Outer build implementation of GetAllRuntimeIdentifiers returns
		a union of all runtime identifiers used across inner and outer
		build evaluations.

		It is further set to run before '_GenerateRestoreProjectSpec'
		(note that running only 'Restore' is too late and will not work
		with solution level restore). This ensures that any conditioning
		of runtime  identifiers against TargetFramework does not prevent
		restore from providing  the necessary RID-specific assets for all
		inner builds.

		It also brings parity to VS vs. command line behaviour in this
		scenario because VS passes all of the information from each
		configured inner build to restore, whereas command-line restore
		without this target would only use the runtime identifiers that
		are statically set in the outer evaluation.
	============================================================
	-->
	<Target Name="GetAllRuntimeIdentifiers"
			Returns="$(RuntimeIdentifiers)"
			BeforeTargets="_GenerateRestoreProjectSpec">

		<ItemGroup>
			<_GetAllRuntimeIdentifiersTargetFrameworks Include="$(TargetFrameworks)"/>
			<_AllRuntimeIdentifiers Include="$(RuntimeIdentifiers);$(RuntimeIdentifier)"/>
		</ItemGroup>

		<MSBuild Projects="$(MSBuildProjectFile)"
				 Targets="GetAllRuntimeIdentifiers"
				 Properties="TargetFramework=%(_GetAllRuntimeIdentifiersTargetFrameworks.Identity)">
			<Output ItemName="_AllRuntimeIdentifiers" TaskParameter="TargetOutputs"/>
		</MSBuild>

		<PropertyGroup>
			<RuntimeIdentifiers>@(_AllRuntimeIdentifiers->Distinct())</RuntimeIdentifiers>
		</PropertyGroup>
	</Target>

	<!--
	============================================================
						GetPackagingOutputs

		Stub multi-targeting implementation of GetPackagingOutputs
		to allow project references from from projects that pull in
		Microsoft.AppxPackage.targets (UWP, PCL) to multi-targeted
		projects.

		Ultimately, the appx targets should be modified to use the
		same P2P TFM negotiation protocol as Microsoft.Common.targets
		so that they can forward to the TFM-specific GetPackagingOutputs
		of the appropriate inner build. This stub would not have any
		bad interaction with that change, which would happily bypass
		this implementation altogether.

		An empty GetPackagingOutputs is sufficient for the common
		case of a library with no special assets to contribute to
		the appx and is also equivalent to what is present in the
		single-targeted case unless WindowsAppContainer is not set
		to true.

		Furthermore, the appx targets currently use continue-on-error
		such that even without this, clean builds succeed but log an
		error and incremental builds silently succeed. As such, this
		simply removes a confounding error from successful clean
		builds.

	============================================================
	-->
	<Target Name="GetPackagingOutputs"/>

	<!-- TODO: Move it before the import of this targets file, will require a heavy refactoring. -->
	<Import Project="MSBuild.NET.BuildTargeting.targets"/>

</Project>