<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!--
		Note that this file is only included when $(TargetFramework) is set and so we do not need to check that here.

		Common targets require that $(TargetFrameworkIdentifier) AND $(TargetFrameworkVersion) are set by static evaluation
		before they are imported. In common cases, we infer them from the short names given via TargetFramework
		to allow for terseness and lack of duplication in project files.

		For other cases, the user must supply them manually.

		For cases where inference is supported, the user need only specify the targets in TargetFrameworks, e.g:
		<PropertyGroup>
			<TargetFrameworks>net45;netstandard1.0</TargetFrameworks>
		</PropertyGroup>

		For cases where inference is not supported, identifier, version and profile can be specified explicitly as follows:
		<PropertyGroup>
			<TargetFrameworks>portable-net451+win81;xyz1.0</TargetFrameworks>
		<PropertyGroup>
		<PropertyGroup Condition="'$(TargetFramework)' == 'xyz1.0'">
			<TargetFrameworkIdentifier>Xyz</TargetFrameworkIdentifier>
		<PropertyGroup>

		Note in the xyz1.0 case, which is meant to demonstrate a framework we don't yet recognize, we can still
		infer the version of 1.0. The user can also override it as always we honor a value that is already set.
	-->

	<PropertyGroup Condition="!$(TargetFramework.Contains(','))">
		<!-- Convert $(TargetFramework) to lower case -->
		<TargetFramework>$(TargetFramework.ToLowerInvariant())</TargetFramework>
		<!-- if version-less framework-profile is specified then default to the highest supported version of that framework-profile -->
		<TargetFramework Condition="'$(TargetFramework)' == 'net-client'">net40-client</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'netmf'">netmf44</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'net'">net45</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'wp'">wp8</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'wpa'">wpa81</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'win'">win8</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'sl'">sl5</TargetFramework>
	</PropertyGroup>

	<!--
		Split $(TargetFramework) into short identifier, version and profile list
		For Example:
			net45 into 'net', '45'
			net40-client into 'net', '40', '+client+'
			portable45-net45+win8+wp8+wpa81 into 'portable', '45', '+net45+win8+wp8+wpa81+'
	-->
	<Choose>
		<When Condition="$(TargetFramework.Contains(','))"/>

		<When Condition="$(TargetFramework.Contains('-'))">
			<!-- Handle short framework ids with profiles -->
			<PropertyGroup>
				<_ShortFrameworkIdentifierWithVersion>$(TargetFramework.Split('-')[0])</_ShortFrameworkIdentifierWithVersion>
				<_ShortFrameworkIdentifier>$(_ShortFrameworkIdentifierWithVersion.TrimEnd('.0123456789'))</_ShortFrameworkIdentifier>
				<_ShortFrameworkVersion>$(_ShortFrameworkIdentifierWithVersion.Substring($(_ShortFrameworkIdentifier.Length)))</_ShortFrameworkVersion>
				<_ShortFrameworkProfile>$(TargetFramework.Split('-')[1])</_ShortFrameworkProfile>
				<_ShortFrameworkProfileCount>$(_ShortFrameworkProfile.Split('+').Length)</_ShortFrameworkProfileCount>
				<!-- Pre and post-pend the separator char + to the short-TFM list after counting so we can easily do a Contains() match -->
				<_ShortFrameworkProfile>+$(_ShortFrameworkProfile)+</_ShortFrameworkProfile>
			</PropertyGroup>
		</When>

		<Otherwise>
			<!-- Handle simple short framework ids -->
			<PropertyGroup>
				<_ShortFrameworkIdentifier>$(TargetFramework.TrimEnd('.0123456789'))</_ShortFrameworkIdentifier>
				<_ShortFrameworkVersion>$(TargetFramework.Substring($(_ShortFrameworkIdentifier.Length)))</_ShortFrameworkVersion>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<!-- Map short name to long name. See earlier comment for example of how to work with identifiers that are not recognized here -->
	<PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == ''">
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'net'">.NETFramework</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'netstandard'">.NETStandard</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'netcoreapp'">.NETCoreApp</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'portable'">.NETPortable</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'netmf'">.NETMicroFramework</TargetFrameworkIdentifier>

		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'sl'">Silverlight</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'wp'">WindowsPhone</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'wpa'">WindowsPhoneApp</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'win'">.NETCore</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'uap'">.NETCore</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'netcore'">.NETCore</TargetFrameworkIdentifier> <!-- Deprecated -->

		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'monoandroid'">MonoAndroid</TargetFrameworkIdentifier> <!-- Deprecated -->
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'monotouch'">MonoTouch</TargetFrameworkIdentifier> <!-- Deprecated -->
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'monomac'">MonoMac</TargetFrameworkIdentifier> <!-- Deprecated -->

		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.android' OR '$(_ShortFrameworkIdentifier)' == 'xamarinandroid'">Xamarin.Android</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.ios' OR '$(_ShortFrameworkIdentifier)' == 'xamarinios'">Xamarin.iOS</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.mac' OR '$(_ShortFrameworkIdentifier)' == 'xamarinmac'">Xamarin.Mac</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.tvos' OR '$(_ShortFrameworkIdentifier)' == 'xamarintvos'">Xamarin.TVOS</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.watchos' OR '$(_ShortFrameworkIdentifier)' == 'xamarinwatchos'">Xamarin.WatchOS</TargetFrameworkIdentifier>

		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'tizen'">Tizen</TargetFrameworkIdentifier>
	</PropertyGroup>

	<Choose>
		<When Condition="'$(TargetFrameworkVersion)' == '' AND '$(_ShortFrameworkVersion)' != '' AND $(_ShortFrameworkVersion.Contains('.'))">
			<!-- Versions with dots are taken as is -->
			<PropertyGroup>
				<TargetFrameworkVersion>$(_ShortFrameworkVersion)</TargetFrameworkVersion>
			</PropertyGroup>
		</When>

		<When Condition="'$(TargetFrameworkVersion)' == '' AND '$(_ShortFrameworkVersion)' != ''">
			<!-- Versions with no dots and up to 3 characters gets implicit dots between characters -->
			<PropertyGroup>
				<TargetFrameworkVersion Condition="$(_ShortFrameworkVersion.Length) == 1">$(_ShortFrameworkVersion[0]).0</TargetFrameworkVersion>
				<TargetFrameworkVersion Condition="$(_ShortFrameworkVersion.Length) == 2">$(_ShortFrameworkVersion[0]).$(_ShortFrameworkVersion[1])</TargetFrameworkVersion>
				<TargetFrameworkVersion Condition="$(_ShortFrameworkVersion.Length) == 3">$(_ShortFrameworkVersion[0]).$(_ShortFrameworkVersion[1]).$(_ShortFrameworkVersion[2])</TargetFrameworkVersion>
			</PropertyGroup>
		</When>

		<Otherwise>
			<!-- Any Version in these Sdks should not lead with 'v' -->
			<PropertyGroup Condition="'$(TargetFrameworkVersion)' != ''">
				<TargetFrameworkVersion>$(TargetFrameworkVersion.TrimStart('vV'))</TargetFrameworkVersion>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<!-- Support for resolving portable framework profiles -->
	<ImportGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETPortable'">
		<Import Condition="'$(TargetFrameworkVersion)' == ''" Project="$(MSBuildThisFileDirectory)FrameworkResolvers\MSBuild.NETPortable.v*.targets"/>
		<Import Condition="'$(TargetFrameworkVersion)' != ''" Project="$(MSBuildThisFileDirectory)FrameworkResolvers\MSBuild.NETPortable.v$(TargetFrameworkVersion).targets"/>
	</ImportGroup>

	<!--
		Trigger an error if we're unable to infer the framework identifier and version.

		We have to evaluate this here and not in the target because by the time the target runs,
		It will have defaulted to .NETFramework & 4.0
	-->
	<PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == '' OR '$(TargetFrameworkVersion)' == ''">
		<_UnsupportedTargetFrameworkError>true</_UnsupportedTargetFrameworkError>
	</PropertyGroup>

	<!--
		Don't leave TargetFrameworkVersion empty if it still hasn't been determined. We will trigger the error above,
		but we need this to be a valid version so that our error message does not get pre-empted by failure to interpret
		version comparison expressions, which is currently unrecoverable in VS.

		Also don't leave TargetFrameworkIdentifier unset as it will be defaulted to .NETFramework by common targets, which
		can cause restore (which we cannot block, see above) to silently succeed for empty TargetFramework.
	-->
	<PropertyGroup>
		<TargetFrameworkIdentifier Condition="'$(TargetFrameworkIdentifier)' == ''">_</TargetFrameworkIdentifier>
		<TargetFrameworkVersion Condition="'$(TargetFrameworkVersion)' == ''">0.0</TargetFrameworkVersion>
		<_TargetFrameworkVersionWithV>v$(TargetFrameworkVersion)</_TargetFrameworkVersionWithV>
	</PropertyGroup>

	<!-- TODO: Temporary shim to be compatible with the older targets, remove once we change the behavioral value of TargetFrameworkVersion -->
	<PropertyGroup>
		<_TargetFrameworkVersionWithoutV>$(TargetFrameworkVersion)</_TargetFrameworkVersionWithoutV>
		<TargetFrameworkVersion>$(_TargetFrameworkVersionWithV)</TargetFrameworkVersion>
	</PropertyGroup>

	<!--
		NOTE:
		We must not validate the TFM before restore target runs as it prevents adding additional TFM
		support from being provided by a nuget package such as MSBuild.NET.Extras.Sdk.

		We run before RunResolvePackageDependencies and GetReferenceAssemblyPaths so that design-time builds
		which do not currently invoke _CheckForInvalidConfigurationAndPlatform, will not trigger spurious
		errors that are only consequences of the root cause identified here.
	-->
	<Target Name="_CheckForUnsupportedTargetFramework"
		BeforeTargets="_CheckForInvalidConfigurationAndPlatform;RunResolvePackageDependencies;GetReferenceAssemblyPaths"
		Condition="'$(_UnsupportedTargetFrameworkError)' == 'true'">

		<NETSdkError Condition="!$(TargetFramework.Contains(';'))"
			ResourceName="CannotInferTargetFrameworkIdentiferAndVersion"
			FormatArguments="$([MSBuild]::Escape('$(TargetFramework)'))"/>

		<NETSdkError Condition="$(TargetFramework.Contains(';'))"
			ResourceName="TargetFrameworkWithSemicolon"
			FormatArguments="$([MSBuild]::Escape('$(TargetFramework)'))"/>
	</Target>

	<Target Name="_CollectTargetFrameworkForTelemetry" AfterTargets="_CheckForUnsupportedTargetFramework">
		<Telemetry EventName="TargetFrameworkEvaluation" EventData="TargetFramework=$([MSBuild]::Escape('$(TargetFrameworkMoniker)'))"/>
	</Target>

	<!--
		Trigger an error if targeting a higher version of TargetFramework than is supported by the current SDK.
	-->
	<Choose>
		<When Condition="'$(TargetFrameworkIdentifier)' == '.NETStandard'">
			<PropertyGroup>
				<TargetFrameworkDisplayName Condition="'$(TargetFrameworkDisplayName)' == ''">.NET Standartd</TargetFrameworkDisplayName>
				<TargetFrameworkMaxVersion Condition="'$(TargetFrameworkMaxVersion)' == ''">$(BundledNETStandardTargetFrameworkVersion)</TargetFrameworkMaxVersion>
			</PropertyGroup>
		</When>
		<When Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'">
			<PropertyGroup>
				<TargetFrameworkDisplayName Condition="'$(TargetFrameworkDisplayName)' == ''">.NET Core</TargetFrameworkDisplayName>
				<TargetFrameworkMaxVersion Condition="'$(TargetFrameworkMaxVersion)' == ''">$(BundledNETCoreAppTargetFrameworkVersion)</TargetFrameworkMaxVersion>
			</PropertyGroup>
		</When>
		<When Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
			<PropertyGroup>
				<TargetFrameworkDisplayName Condition="'$(TargetFrameworkDisplayName)' == ''">.NET Framework</TargetFrameworkDisplayName>
				<TargetFrameworkMaxVersion Condition="'$(TargetFrameworkMaxVersion)' == ''">$(BundledNETFrameworkTargetFrameworkVersion)</TargetFrameworkMaxVersion>
			</PropertyGroup>
		</When>
		<When Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
			<PropertyGroup>
				<TargetFrameworkDisplayName Condition="'$(TargetFrameworkDisplayName)' == ''">.NET Portable</TargetFrameworkDisplayName>
				<TargetFrameworkMaxVersion Condition="'$(TargetFrameworkMaxVersion)' == ''">$(BundledNETPortableTargetFrameworkVersion)</TargetFrameworkMaxVersion>
			</PropertyGroup>
		</When>
	</Choose>

	<Target Name="_CheckForUnsupportedTargetFrameworkVersion"
		BeforeTargets="_CheckForInvalidConfigurationAndPlatform;Restore;CollectPackageReferences"
		Condition="'$(TargetFrameworkIdentifier)' != '_' AND '$(TargetFrameworkMaxVersion)' != ''">

		<NETSdkError Condition="'$(_TargetFrameworkVersionWithoutV)' > '$(TargetFrameworkMaxVersion)'"
			ResourceName="UnsupportedTargetFrameworkVersion"
			FormatArguments="$(TargetFrameworkDisplayName);$(_TargetFrameworkVersionWithoutV);$(TargetFrameworkMaxVersion)"/>
	</Target>

	<PropertyGroup>
		<AppendTargetFrameworkToOutputPath Condition="'$(AppendTargetFrameworkToOutputPath)' == ''">true</AppendTargetFrameworkToOutputPath>
	</PropertyGroup>

	<!--
		Append $(TargetFramework) directory to output and intermediate paths to prevent bin clashes between targets.
	-->
	<PropertyGroup Condition="'$(AppendTargetFrameworkToOutputPath)' == 'true' AND '$(TargetFramework)' != '' AND '$(_UnsupportedTargetFrameworkError)' != 'true'">
		<IntermediateOutputPath>$(IntermediateOutputPath)$(TargetFramework)\</IntermediateOutputPath>
		<OutputPath>$(OutputPath)$(TargetFramework)\</OutputPath>
	</PropertyGroup>

	<PropertyGroup>
		<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
	</PropertyGroup>

</Project>