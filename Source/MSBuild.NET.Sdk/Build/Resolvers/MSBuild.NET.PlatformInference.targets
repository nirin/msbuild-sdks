<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!--
		Note that this file is only included when $(TargetPlatform) is set and so we do not need to check that here.

		Common targets require that $(TargetPlatformIdentifier), $(TargetPlatformVersion) AND $(TargetPlatformArchitecture)
		are set by static evaluation before they are imported.
		In common cases, we infer them from the short names given via TargetPlatform
		to allow for terseness and lack of duplication in project files.

		For other cases, the user must supply them manually.

		For cases where inference is supported, the user need only specify the targets in TargetPlatforms, e.g:
		<PropertyGroup>
			<TargetPlatforms>win7-x86;win-x64</TargetPlatforms>
		</PropertyGroup>

		For cases where inference is not supported, identifier, version and profile can be specified explicitly as follows:
		<PropertyGroup>
			<TargetPlatforms>xyz1.0-arm;win10-arm64</TargetPlatforms>
		<PropertyGroup>
		<PropertyGroup Condition="'$(TargetPlatform)' == 'xyz1.0-arm'">
			<TargetPlatformIdentifier>Xyz</TargetPlatformIdentifier>
		<PropertyGroup>

		Note in the xyz1.0 case, which is meant to demonstrate a platform we don't yet recognize, we can still
		infer the version of 1.0 and the architecture.
		The user can also override it as always we honor a value that is already set.
	-->

	<PropertyGroup>
		<!-- Convert $(TargetPlatform) to lower case -->
		<TargetPlatform Condition="!$(TargetPlatform.Contains(','))">$(TargetPlatform.ToLowerInvariant())</TargetPlatform>
	</PropertyGroup>

	<!--
		Split $(TargetPlatform) into short identifier, version and architecture
		For Example:
			win7 into 'win', '7'
			win8.1-arm into 'win', '8.1', 'arm'
	-->
	<Choose>
		<When Condition="$(TargetPlatform.Contains(','))"/>

		<When Condition="$(TargetPlatform.Contains('-'))">
			<!-- Handle short platform ids with profiles -->
			<PropertyGroup>
				<_ShortPlatformIdentifierWithVersion>$(TargetPlatform.Split('-')[0])</_ShortPlatformIdentifierWithVersion>
				<_ShortPlatformIdentifier>$(_ShortPlatformIdentifierWithVersion.TrimEnd('.0123456789'))</_ShortPlatformIdentifier>
				<_ShortPlatformVersion>$(_ShortPlatformIdentifierWithVersion.Substring($(_ShortPlatformIdentifier.Length)))</_ShortPlatformVersion>
				<_ShortPlatformArchitecture>$(TargetPlatform.Split('-')[1])</_ShortPlatformArchitecture>
			</PropertyGroup>
		</When>

		<Otherwise>
			<!-- Handle simple short platform ids -->
			<PropertyGroup>
				<_ShortPlatformIdentifier>$(TargetPlatform.TrimEnd('.0123456789'))</_ShortPlatformIdentifier>
				<_ShortPlatformVersion>$(TargetPlatform.Substring($(_ShortPlatformIdentifier.Length)))</_ShortPlatformVersion>
				<_ShortPlatformArchitecture>anycpu</_ShortPlatformArchitecture>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<!-- Map short name to long name. See earlier comment for example of how to work with identifiers that are not recognized here. -->
	<PropertyGroup Condition="'$(TargetPlatformIdentifier)' == ''">
		<TargetPlatformIdentifier Condition="'$(_ShortPlatformIdentifier)' == 'win'">Windows</TargetPlatformIdentifier>
		<TargetPlatformIdentifier Condition="'$(_ShortPlatformIdentifier)' == 'linux'">Linux</TargetPlatformIdentifier>

		<TargetPlatformIdentifier Condition="'$(_ShortPlatformIdentifier)' == 'android'">Android</TargetPlatformIdentifier>
		<TargetPlatformIdentifier Condition="'$(_ShortPlatformIdentifier)' == 'tizen'">Tizen</TargetPlatformIdentifier>

		<TargetPlatformIdentifier Condition="'$(_ShortPlatformIdentifier)' == 'ios'">iOS</TargetPlatformIdentifier>
		<TargetPlatformIdentifier Condition="'$(_ShortPlatformIdentifier)' == 'osx'">MacOS</TargetPlatformIdentifier>
		<TargetPlatformIdentifier Condition="'$(_ShortPlatformIdentifier)' == 'tvos'">TVOS</TargetPlatformIdentifier>
		<TargetPlatformIdentifier Condition="'$(_ShortPlatformIdentifier)' == 'watchos'">WatchOS</TargetPlatformIdentifier>
	</PropertyGroup>

	<Choose>
		<When Condition="'$(_ShortPlatformVersion)' != '' AND $(_ShortPlatformVersion.Contains('.'))">
			<!-- Versions with dots are taken as is. -->
			<PropertyGroup Condition="'$(TargetPlatformVersion)' == ''">
				<TargetPlatformVersion>$(_ShortPlatformVersion)</TargetPlatformVersion>
			</PropertyGroup>
		</When>

		<When Condition="'$(_ShortPlatformVersion)' != ''">
			<!-- Versions with no dots and up to 3 characters and implicit dots between characters. -->
			<PropertyGroup Condition="'$(TargetPlatformVersion)' == ''">
				<TargetPlatformVersion Condition="$(_ShortPlatformVersion.Length) == 1">$(_ShortPlatformVersion[0]).0</TargetPlatformVersion>
				<TargetPlatformVersion Condition="$(_ShortPlatformVersion.Length) == 2">$(_ShortPlatformVersion[0]).$(_ShortPlatformVersion[1])</TargetPlatformVersion>
				<TargetPlatformVersion Condition="$(_ShortPlatformVersion.Length) == 3">$(_ShortPlatformVersion[0]).$(_ShortPlatformVersion[1]).$(_ShortPlatformVersion[2])</TargetPlatformVersion>
			</PropertyGroup>
		</When>

		<Otherwise>
			<PropertyGroup Condition="'$(TargetPlatformVersion)' != ''">
				<TargetPlatformVersion>$(TargetPlatformVersion.TrimStart('vV'))</TargetPlatformVersion>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<!--
		Trigger an error if we're unable to infer the platform identifier and version.

		We have to evaluate this here and not in the target because by the time the target runs,
		It will have defaulted to Windows,Version=v10.0
	-->
	<PropertyGroup Condition="'$(TargetPlatformIdentifier)' == '' OR '$(TargetPlatformVersion)' == ''">
		<_UnsupportedTargetPlatformError>true</_UnsupportedTargetPlatformError>
	</PropertyGroup>

	<!--
		NOTE:
		We must not validate the TFM before restore target runs as it prevents adding additional TFM
		support from being provided by a nuget package such as MSBuild.NET.Extras.Sdk.

		We run before RunResolvePackageDependencies and GetReferenceAssemblyPaths so that design-time builds
		which do not currently invoke _CheckForInvalidConfigurationAndPlatform, will not trigger spurious
		errors that are only consequences of the root cause identified here.
	-->
	<Target Name="_CheckForUnsupportedTargetPlatform"
		BeforeTargets="_CheckForInvalidConfigurationAndPlatform;RunResolvePackageDependencies;GetReferenceAssemblyPaths"
		Condition="'$(_UnsupportedTargetPlatformError)' == 'true'">

		<NETSdkError Condition="!$(TargetPlatform.Contains(';'))"
			ResourceName="CannotInferTargetPlatformIdentiferAndVersion"
			FormatArguments="$([MSBuild]::Escape('$(TargetPlatform)'))"/>

		<NETSdkError Condition="$(TargetPlatform.Contains(';'))"
			ResourceName="TargetPlatformWithSemicolon"
			FormatArguments="$([MSBuild]::Escape('$(TargetPlatform)'))"/>
	</Target>

	<Target Name="_CollectTargetPlatformForTelemetry" AfterTargets="_CheckForUnsupportedTargetPlatform">
		<Telemetry EventName="targetplatformeval" EventData="TargetPlatform=$([MSBuild]::Escape('$(TargetPlatformMoniker)'))"/>
	</Target>

	<!--
		Don't leave TargetPlatformVersion empty if it still hasn't been determined. We will trigger the error above,
		but we need this to be a valid version so that our error message does not get pre-empted by failure to interpret
		version comparison expressions, which is currently unrecoverable in VS.

		Also don't leave TargetPlatformIdentifier unset as it will be defaulted to Windows by common targets, which
		can cause restore (which we cannot block, see above) to silently succeed for empty TargetPlatform.
	-->
	<PropertyGroup>
		<TargetPlatformIdentifier Condition="'$(TargetPlatformIdentifier)' == ''">_</TargetPlatformIdentifier>
		<TargetPlatformVersion Condition="'$(TargetPlatformVersion)' == ''">0.0</TargetPlatformVersion>
	</PropertyGroup>

	<!--
		Trigger an error if targeting a higher version of Windows or Linux than is supported by the current SDK.
	-->
	<PropertyGroup Condition="'$(TargetPlatformIdentifier)' != '_' AND '$(TargetPlatformMaxVersion)' == ''">
		<TargetPlatformDisplayName Condition="'$(TargetPlatformIdentifier)' == 'Windows'">Windows</TargetPlatformDisplayName>
		<TargetPlatformMaxVersion Condition="'$(TargetPlatformIdentifier)' == 'Windows'">$(BundledWindowsTargetPlatformVersion)</TargetPlatformMaxVersion>

		<TargetPlatformDisplayName Condition="'$(TargetPlatformIdentifier)' == 'Linux'">Linux</TargetPlatformDisplayName>
		<TargetPlatformMaxVersion Condition="'$(TargetPlatformIdentifier)' == 'Linux'">$(BundledLinuxTargetPlatformVersion)</TargetPlatformMaxVersion>
	</PropertyGroup>

	<Target Name="_CheckForUnsupportedTargetPlatformVersion"
		BeforeTargets="_CheckForInvalidConfigurationAndPlatform;Restore;CollectPackageReferences"
		Condition="'$(TargetPlatformIdentifier)' != '_' AND '$(TargetPlatformMaxVersion)' != ''">

		<NETSdkError Condition="'$(TargetPlatformVersion)' > '$(TargetPlatformMaxVersion)'"
			ResourceName="UnsupportedTargetPlatformVersion"
			FormatArguments="$(TargetPlatformDisplayName);$(TargetPlatformVersion);$(TargetPlatformMaxVersion)"/>
	</Target>

	<PropertyGroup>
		<AppendTargetPlatformToOutputPath Condition="'$(AppendTargetPlatformToOutputPath)' == ''">true</AppendTargetPlatformToOutputPath>
	</PropertyGroup>

	<!--
		Append $(TargetPlatform) directory to output and intermediate paths to prevent bin clashes between targets.
	-->
	<PropertyGroup Condition="'$(AppendTargetPlatformToOutputPath)' == 'true' AND '$(TargetPlatform)' != '' AND '$(_UnsupportedTargetPlatformError)' != 'true'">
		<IntermediateOutputPath>$(IntermediateOutputPath)$(TargetPlatform)\</IntermediateOutputPath>
		<OutputPath>$(OutputPath)$(TargetPlatform)\</OutputPath>
	</PropertyGroup>

	<PropertyGroup>
		<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
	</PropertyGroup>

</Project>