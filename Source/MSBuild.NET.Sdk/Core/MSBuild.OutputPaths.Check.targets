<Project>

	<Target
		Name="_FixupOutputPathsCheck"
		BeforeTargets="_CheckForInvalidConfigurationAndPlatform">
		<PropertyGroup>
			<EnableBuildPathMismatchWarning>true</EnableBuildPathMismatchWarning>
			<EnableBaseIntermediateOutputPathMismatchWarning>false</EnableBaseIntermediateOutputPathMismatchWarning>
		</PropertyGroup>
	</Target>

	<Target
		Name="_CheckForBuildPathMismatch"
		AfterTargets="_FixupOutputPathsCheck;_CheckForInvalidConfigurationAndPlatform"
		BeforeTargets="$(BuildDependsOn);Build;$(RebuildDependsOn);Rebuild;$(CleanDependsOn);Clean">

		<!--
			Log a warning if:
				1. `EnableBuildPathMismatchWarning` is `true`
				2. `BuildPath` was set in the body of a project after its default value was set in Microsoft.Common.props
				3. `BuildPath` is not the same as `MSBuildProjectExtensionsPath`

			Similar to the error above, there are cases when users set `BuildPath` in the body of their project and things build but only by coincidence.
			MSBuild does not know if `BuildPath` changing would cause problems so tools like NuGet must set `EnableBuildPathMismatchWarning` to `true`.
		-->
		<Warning Code="MSB3539"
			Text="The value of the property `BuildPath` was modified after it was used by MSBuild which can lead to unexpected build results. Tools such as NuGet will write outputs to the path specified by the `MSBuildProjectExtensionsPath` instead. To override this property safely, you must do so before it is defined, there by using `Directory.Build.props`.  For more information, please visit https://go.microsoft.com/fwlink/?linkid=869650"
			Condition="'$(EnableBuildPathMismatchWarning)' == 'true' AND '$(_InitialBuildPath)' != '$(BuildPath)' AND '$(BuildPath)' != '$(MSBuildProjectExtensionsPath)'"/>
	</Target>

</Project>