<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<SupportedPlatforms>AnyCPU;x64;x86;ARM;ARM64</SupportedPlatforms>
	</PropertyGroup>

	<!-- User-facing configuration-agnostic defaults -->
	<PropertyGroup>
		<OutputType Condition="'$(OutputType)' == ''">Library</OutputType>
		<FileAlignment Condition="'$(FileAlignment)' == ''">512</FileAlignment>
		<ErrorReport Condition="'$(ErrorReport)' == ''">prompt</ErrorReport>
		<AssemblyName Condition="'$(AssemblyName)' == ''">$(MSBuildProjectName)</AssemblyName>
		<RootNamespace Condition="'$(RootNamespace)' == ''">$(MSBuildProjectName)</RootNamespace>
		<Deterministic Condition="'$(Deterministic)' == ''">true</Deterministic>
	</PropertyGroup>

	<!-- User-facing configuration-specific defaults -->
	<PropertyGroup Condition="'$(Configuration)' == 'Debug'">
		<DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
		<Optimize Condition="'$(Optimize)' == ''">false</Optimize>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)' == 'Release'">
		<Optimize Condition="'$(Optimize)' == ''">true</Optimize>
	</PropertyGroup>

	<!-- User-facing platform-specific defaults -->

	<!--
		We cannot compare against $(Platform) directly as that will give VS cause to instantiate extra
		configurations, for each combination, which leads to performance problems and clutter in the sln
		in the common AnyCPU-only case.

		We cannot just set $(PlatformTarget) to $(Platform) here because $(Platform) can be set to anything
		at the solution level, but there are a fixed set valid $(PlatformTarget) values that can be passed
		to the compiler. It is up to the user to explicitly set PlatformTarget to non-AnyCPU (if desired)
		outside the 1:1 defaults below.
	-->
	<PropertyGroup>
		<_SdkSupportedPlatforms>;$(SupportedPlatforms);</_SdkSupportedPlatforms>
		<_SdkPlatformInference Condition="$(_SdkSupportedPlatforms.Contains(';$(Platform);'))">$(Platform)</_SdkPlatformInference>
		<PlatformTarget Condition="'$(PlatformTarget)' == '' AND '$(_SdkPlatformInference)' != ''">$(_SdkPlatformInference)</PlatformTarget>
		<_SdkPlatformInference/>
		<_SdkSupportedPlatforms/>
	</PropertyGroup>

	<!-- Default settings for all projects built with this Sdk package -->
	<PropertyGroup>
		<DebugType Condition="'$(DebugType)' == ''">portable</DebugType>

		<!-- This will turn off the base UWP-specific 'ResolveNuGetPackages' target for Non-UWP targets -->
		<!-- TODO: Check and remove this after 'ResolveNuGetPackages' logic for all Target Frameworks have been merged -->
		<ResolveNuGetPackages Condition="!$(TargetFramework.StartsWith('uap10.0'))">false</ResolveNuGetPackages>

		<!-- Skip import of Microsoft.NuGet.props and Microsoft.NuGet.targets -->
		<!-- TODO: Check and Remove this after legacy extensions have been disabled -->
		<SkipImportNuGetProps>true</SkipImportNuGetProps>
		<SkipImportNuGetBuildTargets>true</SkipImportNuGetBuildTargets>

		<!--
			NuGet should always restore .NET SDK projects with "PackageReference" style restore. Setting this property will
			cause the right thing to happen even if there aren't any PackageReference items in the project, such as when
			a project targets .NET Framework and doesn't have any direct package dependencies.
		-->
		<RestoreProjectStyle>PackageReference</RestoreProjectStyle>

		<!-- Exclude GAC, registry, output directory from search paths. -->
		<AssemblySearchPaths Condition="'$(AssemblySearchPaths)' == ''">{CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory};{RawFileName}</AssemblySearchPaths>
		<DesignTimeAssemblySearchPaths Condition="'$(DesignTimeAssemblySearchPaths)' == ''">$(AssemblySearchPaths)</DesignTimeAssemblySearchPaths>

		<AllowUnsafeBlocks Condition="'$(AllowUnsafeBlocks)' == ''">false</AllowUnsafeBlocks>
		<SignAssembly Condition="'$(SignAssembly)' == ''">false</SignAssembly>
		<DelaySign Condition="'$(DelaySign)' == ''">false</DelaySign>
		<CheckForOverflowUnderflow Condition="'$(CheckForOverflowUnderflow)' == ''">false</CheckForOverflowUnderflow>
		<DebugSymbols Condition="'$(DebugSymbols)' == ''">false</DebugSymbols>
		<TreatWarningsAsErrors Condition="'$(TreatWarningsAsErrors)' == ''">false</TreatWarningsAsErrors>

		<Prefer32Bit Condition="'$(Prefer32Bit)' == '' AND '$(PlatformTarget)' == 'x86'">true</Prefer32Bit>
		<Prefer32Bit Condition="'$(Prefer32Bit)' == ''">false</Prefer32Bit>

		<!-- NuGet Code NU1605 for unknown Framework Identifiers -->
		<WarningsAsErrors Condition="'$(WarningsAsErrors)' == ''">NU1605</WarningsAsErrors>
		<GeneratePackageOnBuild Condition="'$(GeneratePackageOnBuild)' == ''">false</GeneratePackageOnBuild>
		<PackageRequireLicenseAcceptance Condition="'$(PackageRequireLicenseAcceptance)' == ''">false</PackageRequireLicenseAcceptance>
	</PropertyGroup>

	<PropertyGroup>
		<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
	</PropertyGroup>

</Project>