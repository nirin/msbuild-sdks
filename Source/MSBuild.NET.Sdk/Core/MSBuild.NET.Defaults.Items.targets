<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<EnableDefaultCompileItems Condition="'$(EnableDefaultCompileItems)' == ''">true</EnableDefaultCompileItems>
		<EnableDefaultEmbeddedResourceItems Condition="'$(EnableDefaultEmbeddedResourceItems)' == ''">true</EnableDefaultEmbeddedResourceItems>
	</PropertyGroup>

	<PropertyGroup Condition="'$(DisableImplicitFrameworkReferences)' != 'true'">
		<DisableImplicitFrameworkReferences Condition="'$(ImplicitFrameworkPackageName)' == '' AND '$(ImplicitFrameworkPackageVersion)' == ''">true</DisableImplicitFrameworkReferences>
	</PropertyGroup>

	<!--
		Automatically add Link metadata to items of specific types if they are outside of the project folder and don't already have the Link metadata set.
		This will cause them to be shown in the Solution Explorer.  If an item has LinkBase metadata, the automatic Link will start with that value, and
		the items will appear in the Solution Explorer under the folder specified by LinkBase.
		-->
	<ItemGroup Condition="'$(SetLinkMetadataAutomatically)' != 'false'">
		<None Update="@(None)">
			<!--
				First, add a trailing slash to the LinkBase metadata if necessary.  This allows us to use the same value
				for the Link metadata whether or not LinkBase metadata is set: %(LinkBase)%(RecursiveDir)%(Filename)%(Extension)

				Note that RecursiveDir already includes the trailing slash.
			-->
			<LinkBase Condition="'%(LinkBase)' != ''">$([MSBuild]::EnsureTrailingSlash(%(LinkBase)))</LinkBase>
			<!--
				Set the Link metadata if it's not already set, if the item wasn't defined in a shared project,  and the item is outside of the project directory.
				Check whether the item was defined in a shared project by checking whether the extension of the defining project was .projitems.
				Check whether an item is inside the project directory by seeing if the FullPath starts with EnsureTrailingSlash(MSBuildProjectDirectory)
				The FullPath and the MSBuildProjectDirectory will both already be normalized full paths.
				The call to [MSBuild]::ValueOrDefault() is there in order to allow calling StartsWith on the FullPath value, since it's
				not possible to call a string method on a metadata item directly.  The intrinsic ValueOrDefault() will be more
				performant than calling String.Copy(), which has been used for this in other contexts, but actually makes a copy
				of the string data.
			-->
			<Link Condition="'%(Link)' == '' AND '%(DefiningProjectExtension)' != '.projitems' AND !$([MSBuild]::ValueOrDefault('%(FullPath)', '').StartsWith($([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))))">%(LinkBase)%(RecursiveDir)%(Filename)%(Extension)</Link>
		</None>

		<AdditionalFiles Update="@(AdditionalFiles)">
			<LinkBase Condition="'%(LinkBase)' != ''">$([MSBuild]::EnsureTrailingSlash(%(LinkBase)))</LinkBase>
			<Link Condition="'%(Link)' == '' AND '%(DefiningProjectExtension)' != '.projitems' AND !$([MSBuild]::ValueOrDefault('%(FullPath)', '').StartsWith($([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))))">%(LinkBase)%(RecursiveDir)%(Filename)%(Extension)</Link>
		</AdditionalFiles>

		<Content Update="@(Content)">
			<LinkBase Condition="'%(LinkBase)' != ''">$([MSBuild]::EnsureTrailingSlash(%(LinkBase)))</LinkBase>
			<Link Condition="'%(Link)' == '' AND '%(DefiningProjectExtension)' != '.projitems' AND !$([MSBuild]::ValueOrDefault('%(FullPath)', '').StartsWith($([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))))">%(LinkBase)%(RecursiveDir)%(Filename)%(Extension)</Link>
		</Content>

		<Compile Update="@(Compile)">
			<LinkBase Condition="'%(LinkBase)' != ''">$([MSBuild]::EnsureTrailingSlash(%(LinkBase)))</LinkBase>
			<Link Condition="'%(Link)' == '' AND '%(DefiningProjectExtension)' != '.projitems' AND !$([MSBuild]::ValueOrDefault('%(FullPath)', '').StartsWith($([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))))">%(LinkBase)%(RecursiveDir)%(Filename)%(Extension)</Link>
		</Compile>

		<EmbeddedResource Update="@(EmbeddedResource)">
			<LinkBase Condition="'%(LinkBase)' != ''">$([MSBuild]::EnsureTrailingSlash(%(LinkBase)))</LinkBase>
			<Link Condition="'%(Link)' == '' AND '%(DefiningProjectExtension)' != '.projitems' AND !$([MSBuild]::ValueOrDefault('%(FullPath)', '').StartsWith($([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))))">%(LinkBase)%(RecursiveDir)%(Filename)%(Extension)</Link>
		</EmbeddedResource>
	</ItemGroup>

	<UsingTask TaskName="CheckForImplicitPackageReferenceOverrides" AssemblyFile="$(MicrosoftNETBuildTasksAssembly)"/>

	<!-- Remove package references with metadata IsImplicitlyDefined = true, if there are other PackageReference items with the same identity -->
	<Target Name="CheckForImplicitPackageReferenceOverrides" BeforeTargets="_CheckForInvalidConfigurationAndPlatform;CollectPackageReferences">
		<PropertyGroup>
			<ImplicitPackageReferenceInformationLink>https://aka.ms/sdkimplicitrefs</ImplicitPackageReferenceInformationLink>
		</PropertyGroup>

		<CheckForImplicitPackageReferenceOverrides
			PackageReferenceItems="@(PackageReference)"
			MoreInformationLink="$(ImplicitPackageReferenceInformationLink)">
			<Output TaskParameter="ItemsToRemove" ItemName="_PackageReferenceToRemove"/>
		</CheckForImplicitPackageReferenceOverrides>

		<ItemGroup>
			<!-- Note that the condition here is important, otherwise the Remove will operate based just on item identity and remove all items
				that had duplicates, instead of leaving the ones without IsImplicitlyDefined set to true. -->
			<PackageReference Remove="@(_PackageReferenceToRemove)" Condition="'%(PackageReference.IsImplicitlyDefined)' == 'true'"/>
		</ItemGroup>

	</Target>

	<UsingTask TaskName="CheckForDuplicateItems" AssemblyFile="$(MicrosoftNETBuildTasksAssembly)"/>

	<Target Name="CheckForDuplicateItems" BeforeTargets="_CheckForInvalidConfigurationAndPlatform;CoreCompile">
		<PropertyGroup>
			<DefaultItemsMoreInformationLink>https://aka.ms/sdkimplicititems</DefaultItemsMoreInformationLink>
			<!--
				For the design-time build, we will continue on error and remove the duplicate items.
				This is because otherwise there won't be any references to pass to the compiler, leading to design-time
				compilation errors for every API that is used in the project.  Amidst all the compile errors, it would
				be easy to miss the duplicate items error which is the real source of the problem.
			-->
			<CheckForDuplicateItemsContinueOnError>false</CheckForDuplicateItemsContinueOnError>
			<CheckForDuplicateItemsContinueOnError Condition="'$(DesignTimeBuild)' == 'true'">ErrorAndContinue</CheckForDuplicateItemsContinueOnError>
		</PropertyGroup>

		<!-- Default content items are enabled by other SDKs, not the Core SDK, but we check it here for simplicity -->
		<CheckForDuplicateItems
			Items="@(Content)"
			ItemName="Content"
			DefaultItemsEnabled="$(EnableDefaultItems)"
			DefaultItemsOfThisTypeEnabled="$(EnableDefaultContentItems)"
			PropertyNameToDisableDefaultItems="EnableDefaultContentItems"
			MoreInformationLink="$(DefaultItemsMoreInformationLink)"
			ContinueOnError="$(CheckForDuplicateItemsContinueOnError)">
			<Output TaskParameter="DeduplicatedItems" ItemName="DeduplicatedContentItems"/>
		</CheckForDuplicateItems>

		<CheckForDuplicateItems
			Items="@(Compile)"
			ItemName="Compile"
			DefaultItemsEnabled="$(EnableDefaultItems)"
			DefaultItemsOfThisTypeEnabled="$(EnableDefaultCompileItems)"
			PropertyNameToDisableDefaultItems="EnableDefaultCompileItems"
			MoreInformationLink="$(DefaultItemsMoreInformationLink)"
			ContinueOnError="$(CheckForDuplicateItemsContinueOnError)">
			<Output TaskParameter="DeduplicatedItems" ItemName="DeduplicatedCompileItems"/>
		</CheckForDuplicateItems>

		<CheckForDuplicateItems
			Items="@(EmbeddedResource)"
			ItemName="EmbeddedResource"
			DefaultItemsEnabled="$(EnableDefaultItems)"
			DefaultItemsOfThisTypeEnabled="$(EnableDefaultEmbeddedResourceItems)"
			PropertyNameToDisableDefaultItems="EnableDefaultEmbeddedResourceItems"
			MoreInformationLink="$(DefaultItemsMoreInformationLink)"
			ContinueOnError="$(CheckForDuplicateItemsContinueOnError)">
			<Output TaskParameter="DeduplicatedItems" ItemName="DeduplicatedEmbeddedResourceItems"/>
		</CheckForDuplicateItems>

		<ItemGroup Condition="'$(DesignTimeBuild)' == 'true' AND '@(DeduplicatedContentItems)' != ''">
			<Content Remove="@(Content)"/>
			<Content Include="@(DeduplicatedContentItems)"/>
		</ItemGroup>

		<ItemGroup Condition="'$(DesignTimeBuild)' == 'true' AND '@(DeduplicatedCompileItems)' != ''">
			<Compile Remove="@(Compile)"/>
			<Compile Include="@(DeduplicatedCompileItems)"/>
		</ItemGroup>

		<ItemGroup Condition="'$(DesignTimeBuild)' == 'true' AND '@(DeduplicatedEmbeddedResourceItems)' != ''">
			<EmbeddedResource Remove="@(EmbeddedResource)"/>
			<EmbeddedResource Include="@(DeduplicatedEmbeddedResourceItems)"/>
		</ItemGroup>
	</Target>

	<PropertyGroup>
		<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
	</PropertyGroup>

</Project>
