<Project>

	<PropertyGroup>
		<!-- Inside Visual Studio, TF must be empty to bypass the CPS-based restore mechanism -->
		<TargetFramework/>

		<!-- The main output in this case will be the package itself. -->
		<TargetName>$(PackageId)</TargetName>

		<!-- Speed-up build since we don't do assembly resolution -->
		<ResolveAssemblyReferencesDependsOn/>
	</PropertyGroup>

	<ItemDefinitionGroup>
		<!--
			This turns off '_GetProjectReferenceTargetFrameworkProperties' which passes down
			our TF to referenced projects and causes build to fail even if we don't really
			need to match up with referenced projects outputs.

			We're basically using the documented escape hatch,
			see https://github.com/dotnet/msbuild/blob/vs17.0/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1780
		-->
		<ProjectReference>
			<SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
			<ReferenceOutputAssembly>false</ReferenceOutputAssembly>
			<AdditionalProperties>FromPackagingProject=true</AdditionalProperties>
		</ProjectReference>
	</ItemDefinitionGroup>

	<!--
		Just to make it easy for consumers to request the 'TargetPath' as usual but get the
		actual package file, which contains the 'PackageVersion' and will be dynamic therefore.
	-->
	<Target Name="UpdateTargetPath"
			BeforeTargets="GetTargetPath;GetTargetPathWithTargetPlatformMoniker"
			DependsOnTargets="GetPackageTargetPath">
		<PropertyGroup>
			<TargetPath>@(PackageTargetPath->'%(FullPath)')</TargetPath>
		</PropertyGroup>
	</Target>

	<Target Name="CoreCompile" DependsOnTargets="Pack"/>
	<Target Name="CreateManifestResourceNames"/>
	<Target Name="GetReferenceAssemblyPaths"/>

	<Target Name="_CleanReferences" AfterTargets="ResolveAssemblyReferences">
		<ItemGroup>
			<ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)"/>
		</ItemGroup>
	</Target>

</Project>