<Project>

	<!--
		Determine the path to the directory packages props file, if the user did not disable `ImportDirectoryPackagesProps` and
		they did not already specify an absolute path to use via `DirectoryPackagesProps`
	-->
	<PropertyGroup Condition="'$(DirectoryPackagesProps)' == ''">
		<DirectoryPackagesPropsFile Condition="'$(DirectoryPackagesPropsFile)' == ''">Directory.Packages.props</DirectoryPackagesPropsFile>
		<DirectoryPackagesPropsPath Condition="'$(DirectoryPackagesPropsPath)' == ''">$([MSBuild]::GetDirectoryNameOfFileAbove('$(MSBuildProjectDirectory)', '$(DirectoryPackagesPropsFile)'))</DirectoryPackagesPropsPath>
		<DirectoryPackagesProps Condition="'$(DirectoryPackagesPropsPath)' != ''">$([System.IO.Path]::Combine('$(DirectoryPackagesPropsPath)', '$(DirectoryPackagesPropsFile)'))</DirectoryPackagesProps>
	</PropertyGroup>

	<!--
		Import 'Directory.Packages.props' which will contain centralized packages for all the projects and solutions under
		the directory in which the file is present. This is similar to 'Directory.Build.props/targets' logic which is present
		in the common props/targets which serve a similar purpose.
	-->
	<Import Project="$(DirectoryPackagesProps)" Condition="Exists('$(DirectoryPackagesProps)')"/>

	<PropertyGroup Condition="Exists('$(DirectoryPackagesProps)')">
		<CentralPackageVersionsFileImported>true</CentralPackageVersionsFileImported>
	</PropertyGroup>

</Project>