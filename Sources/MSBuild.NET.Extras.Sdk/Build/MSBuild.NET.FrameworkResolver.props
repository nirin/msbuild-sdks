<Project>

	<!--
		Note that this file is only included when 'TargetFramework' is set and so we do not need to check that here.

		Common targets require that 'TargetFrameworkIdentifier' AND 'TargetFrameworkVersion' are set by static evaluation
		before they are imported. In common cases, we infer them from the short names given via 'TargetFramework'
		to allow for terseness and lack of duplication in project files. For other cases, the user must supply them manually.

		For cases where inference is supported, the user need only specify the targets in 'TargetFrameworks', e.g:

		<PropertyGroup>
			<TargetFrameworks>net472;netstandard2.0;netcoreapp2.0</TargetFrameworks>
		</PropertyGroup>

		For cases where inference is not supported, identifier and version can be specified explicitly as follows:

		<PropertyGroup>
			<TargetFrameworks>net48;xyz1.0</TargetFrameworks>
		<PropertyGroup>

		<PropertyGroup Condition="'$(TargetFramework)' == 'xyz1.0'">
			<TargetFrameworkIdentifier>Xyz</TargetFrameworkIdentifier>
		<PropertyGroup>

		Note in the xyz1.0 case, which is meant to demonstrate a framework we don't yet recognize, we can still
		infer the version of 1.0. The user can also override it as always we honor a value that is already set.
	-->

	<PropertyGroup>
		<_IsInvalidTargetFramework Condition="$(TargetFramework.Contains(','))">true</_IsInvalidTargetFramework>
		<_IsInvalidTargetFramework Condition="$(TargetFramework.Contains('='))">true</_IsInvalidTargetFramework>
		<_IsInvalidTargetFramework Condition="$(TargetFramework.Contains('~'))">true</_IsInvalidTargetFramework>
	</PropertyGroup>

	<!-- if version-less framework-profile is specified then default to the highest supported version of that framework-profile -->
	<PropertyGroup>
		<TargetFramework Condition="'$(TargetFramework)' == 'net'">net48</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'net-client'">net40-client</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'net-cf'">net35-cf</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'netmf'">netmf44</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'netcore'">netcore50</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'uap'">uap10.0</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'win'">win81</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'wpa'">wpa81</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'wp'">wp8</TargetFramework>
		<TargetFramework Condition="'$(TargetFramework)' == 'sl'">sl5</TargetFramework>
	</PropertyGroup>

	<!--
		Split 'TargetFramework' into short identifier, version and profile
		For Example:
			'net45' into 'net', '45'
			'net40-client' into 'net', '40', 'client'
			'portable45-net45+win8+wp8+wpa81' into 'portable', '45', '+net45+win8+wp8+wpa81+'
	-->
	<Choose>
		<!-- Handle short framework ids with profiles -->
		<When Condition="$(TargetFramework.Contains('-'))">
			<PropertyGroup>
				<_ShortFramework>$(TargetFramework.Split('-')[0])</_ShortFramework>
				<_ShortFrameworkIdentifier>$(_ShortFramework.TrimEnd('.0123456789'))</_ShortFrameworkIdentifier>
				<_ShortFrameworkVersion>$(_ShortFramework.Substring($(_ShortFrameworkIdentifier.Length)))</_ShortFrameworkVersion>
				<_ShortFrameworkProfile>$(TargetFramework.Split('-')[1])</_ShortFrameworkProfile>
			</PropertyGroup>

			<PropertyGroup Condition="$(_ShortFrameworkProfile.Contains('+'))">
				<_ShortFrameworkProfileCount>$(_ShortFrameworkProfile.Split('+').Length)</_ShortFrameworkProfileCount>
				<!-- Surround the short-profile list with the separator char '+' (after counting), so, we can easily do 'Contains()' -->
				<_ShortFrameworkProfile>+$(_ShortFrameworkProfile)+</_ShortFrameworkProfile>
			</PropertyGroup>
		</When>

		<!-- Handle short framework ids without profiles -->
		<Otherwise>
			<PropertyGroup>
				<_ShortFrameworkIdentifier>$(TargetFramework.TrimEnd('.0123456789'))</_ShortFrameworkIdentifier>
				<_ShortFrameworkVersion>$(TargetFramework.Substring($(_ShortFrameworkIdentifier.Length)))</_ShortFrameworkVersion>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<!-- Map short name to long name -->
	<PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == ''">
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'net'">.NETFramework</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'netcoreapp'">.NETCoreApp</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'netstandard'">.NETStandard</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'portable'">.NETPortable</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'netmf'">.NETMicroFramework</TargetFrameworkIdentifier>

		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'sl'">Silverlight</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'wp'">WindowsPhone</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'wpa'">WindowsPhoneApp</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'win'">.NETCore</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'uap'">.NETCore</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'netcore'">.NETCore</TargetFrameworkIdentifier>

		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'monoandroid'">MonoAndroid</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'monotouch'">MonoTouch</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'monomac'">MonoMac</TargetFrameworkIdentifier>

		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.android'">Xamarin.Android</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.ios'">Xamarin.iOS</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.mac'">Xamarin.Mac</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.tvos'">Xamarin.TVOS</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.watchos'">Xamarin.WatchOS</TargetFrameworkIdentifier>

		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.psvita'">Xamarin.PlayStationVita</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.psthree'">Xamarin.PlayStation3</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.psfour'">Xamarin.PlayStation4</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.xboxthreesixty'">Xamarin.Xbox360</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.xboxone'">Xamarin.XboxOne</TargetFrameworkIdentifier>

		<TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'tizen'">Tizen</TargetFrameworkIdentifier>
	</PropertyGroup>

	<Choose>
		<!-- Versions with dots are taken as is -->
		<When Condition="'$(TargetFrameworkVersion)' == '' AND '$(_ShortFrameworkVersion)' != '' AND $(_ShortFrameworkVersion.Contains('.'))">
			<PropertyGroup>
				<TargetFrameworkVersion>$(_ShortFrameworkVersion)</TargetFrameworkVersion>
			</PropertyGroup>
		</When>

		<!-- Versions with no dots and up to 3 characters gets implicit dots between characters -->
		<When Condition="'$(TargetFrameworkVersion)' == '' AND '$(_ShortFrameworkVersion)' != ''">
			<PropertyGroup>
				<TargetFrameworkVersion Condition="$(_ShortFrameworkVersion.Length) == 1">$(_ShortFrameworkVersion[0]).0</TargetFrameworkVersion>
				<TargetFrameworkVersion Condition="$(_ShortFrameworkVersion.Length) == 2">$(_ShortFrameworkVersion[0]).$(_ShortFrameworkVersion[1])</TargetFrameworkVersion>
				<TargetFrameworkVersion Condition="$(_ShortFrameworkVersion.Length) == 3">$(_ShortFrameworkVersion[0]).$(_ShortFrameworkVersion[1]).$(_ShortFrameworkVersion[2])</TargetFrameworkVersion>
			</PropertyGroup>
		</When>

		<!-- Any Version in here should not lead with 'v' -->
		<Otherwise>
			<PropertyGroup Condition="'$(TargetFrameworkVersion)' != ''">
				<TargetFrameworkVersion>$(TargetFrameworkVersion.TrimStart('vV'))</TargetFrameworkVersion>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<!-- Handle Identifier for Modern .NET Apps targeting '.NETCoreApp' Identifier through 'net' short id -->
	<PropertyGroup Condition="'$(_ShortFrameworkIdentifier)' == 'net'">
		<TargetFrameworkIdentifier Condition="'$(TargetFrameworkVersion)' != '' AND '$(TargetFrameworkVersion)' >= '5.0'">.NETCoreApp</TargetFrameworkIdentifier>
	</PropertyGroup>

	<!-- Support for resolving full framework profiles -->
	<Import Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" Project="Resolvers\MSBuild.NETFramework.props"/>

	<!-- Support for resolving portable framework profiles -->
	<ImportGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETPortable'">
		<Import Condition="'$(TargetFrameworkVersion)' == ''" Project="Resolvers\MSBuild.NETPortable.v*.props"/>
		<Import Condition="'$(TargetFrameworkVersion)' != ''" Project="Resolvers\MSBuild.NETPortable.v$(TargetFrameworkVersion).props"/>
	</ImportGroup>

	<!--
		Trigger an error if we're unable to infer the framework identifier and version.

		We have to evaluate this here and not in the target because by the time the target runs,
		It will have defaulted to '.NETFramework' & '4.0'.
	-->
	<PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == '' OR '$(TargetFrameworkVersion)' == ''">
		<_IsUnsupportedTargetFramework>true</_IsUnsupportedTargetFramework>
	</PropertyGroup>

	<!--
		Do not leave 'TargetFrameworkVersion' empty if it still has not been determined. We will trigger the error above,
		but we need this to be a valid version so that our error message does not get pre-empted by failure to interpret
		version comparison expressions, which is currently unrecoverable in VS.

		Also do not leave 'TargetFrameworkIdentifier' unset as it will be defaulted to '.NETFramework' by common targets, which
		can cause restore (which we cannot block, see above) to silently succeed for empty 'TargetFramework'.
	-->
	<PropertyGroup>
		<TargetFrameworkIdentifier Condition="'$(TargetFrameworkIdentifier)' == ''">NIL</TargetFrameworkIdentifier>
		<TargetFrameworkVersion Condition="'$(TargetFrameworkVersion)' == ''">0.0</TargetFrameworkVersion>
	</PropertyGroup>

	<PropertyGroup>
		<_ResolvedTargetFramework>true</_ResolvedTargetFramework>
	</PropertyGroup>

	<!-- HACK: Temporary shim to be compatible with the older targets, remove once we change the behavioral value of 'TargetFrameworkVersion' -->
	<PropertyGroup Condition="'$(UsingMicrosoftNETSdk)' == 'true'">
		<_TargetFrameworkVersionWithoutV>$(TargetFrameworkVersion)</_TargetFrameworkVersionWithoutV>
		<_TargetFrameworkVersionWithV>v$(TargetFrameworkVersion)</_TargetFrameworkVersionWithV>
		<TargetFrameworkVersion>$(_TargetFrameworkVersionWithV)</TargetFrameworkVersion>
	</PropertyGroup>

</Project>