<Project>

	<!-- Disable MSBuild imports from various extension points -->
	<Import Project="DisableExtensions\Microsoft.Common.targets"/>
	<Import Project="DisableExtensions\Microsoft.NETFramework.props"/>
	<Import Project="DisableExtensions\Microsoft.NETFramework.targets"/>

	<!--
		With MSBuild 12, we have changed 'MSBuildToolsPath' to for the first time point to a directory
		outside of the .NET Framework.  As a result of this, there were several targets files, of which
		this was one, that were being referenced as out of 'MSBuildToolsPath' that are now no longer there.

		Thus, we are shimming those targets files so that they do still appear in 'MSBuildToolsPath', so that
		consumers of them are not broken, but since the targets files themselves are still part of .NET,
		the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
	-->

	<Import Project="$(MSBuildFrameworkToolsPath)Microsoft.Common.targets"/>

	<!--
		Import Project Extensions and Directory Build targets. The Common props already imports corresponding props but legacy Common targets do not.
		So, we add this here instead. This ensures that we import targets along side props when MSBuild v15+ Common props is being used.
	-->
	<PropertyGroup>
		<_UsingProjectExtensions Condition="'$(DirectoryBuildPropsPath)' != '' OR '$(MSBuildProjectExtensionsPath)' != ''">true</_UsingProjectExtensions>
	</PropertyGroup>

	<PropertyGroup Condition="'$(_UsingProjectExtensions)' == 'true'">
		<ImportProjectExtensionTargets Condition="'$(ImportProjectExtensionTargets)' == ''">true</ImportProjectExtensionTargets>
		<ImportDirectoryBuildTargets Condition="'$(ImportDirectoryBuildTargets)' == ''">true</ImportDirectoryBuildTargets>
	</PropertyGroup>

	<PropertyGroup Condition="'$(ImportDirectoryBuildTargets)' == 'true' AND '$(DirectoryBuildTargetsPath)' == ''">
		<_DirectoryBuildTargetsFile Condition="'$(_DirectoryBuildTargetsFile)' == ''">Directory.Build.targets</_DirectoryBuildTargetsFile>
		<_DirectoryBuildTargetsBasePath Condition="'$(_DirectoryBuildTargetsBasePath)' == ''">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), '$(_DirectoryBuildTargetsFile)'))</_DirectoryBuildTargetsBasePath>
		<DirectoryBuildTargetsPath Condition="'$(_DirectoryBuildTargetsBasePath)' != '' AND '$(_DirectoryBuildTargetsFile)' != ''">$([System.IO.Path]::Combine('$(_DirectoryBuildTargetsBasePath)', '$(_DirectoryBuildTargetsFile)'))</DirectoryBuildTargetsPath>
	</PropertyGroup>

	<Import Project="$(MSBuildProjectExtensionsPath)$(MSBuildProjectFile).*.targets" Condition="'$(ImportProjectExtensionTargets)' == 'true' AND Exists('$(MSBuildProjectExtensionsPath)')"/>
	<Import Project="$(DirectoryBuildTargetsPath)" Condition="'$(ImportDirectoryBuildTargets)' == 'true' AND Exists('$(DirectoryBuildTargetsPath)')"/>

	<!--
		Fix up 'FrameworkPathOverride', which is primarily used to determine the location of 'mscorlib.dll'
		in the (relatively uncommon) situation where the reference assemblies, in which it's usually found, are not installed.
	-->
	<PropertyGroup>
		<FrameworkPathOverride Condition="!Exists('$(FrameworkPathOverride)\mscorlib.dll')">$(MSBuildFrameworkToolsPath)</FrameworkPathOverride>
	</PropertyGroup>

</Project>