<Project>

	<PropertyGroup>
		<!-- VS10 without SP1 and without VS11 will not have VisualStudioVersion set, so do that here -->
		<VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">10.0</VisualStudioVersion>
		<!-- By default, we are creating a managed app because .NET 2.0 projects did not have this property. -->
		<TargetRuntime Condition="'$(TargetRuntime)' == ''">Managed</TargetRuntime>
	</PropertyGroup>

	<!-- AvailablePlatforms is the list of platform targets available. -->
	<PropertyGroup>
		<AvailablePlatforms Condition="'$(VisualStudioVersion)' == '10.0' OR '$(VisualStudioVersion)' == ''">Any CPU,x86,x64,Itanium</AvailablePlatforms>
		<AvailablePlatforms Condition="'$(VisualStudioVersion)' != '' AND '$(VisualStudioVersion)' > '10.0'">Any CPU,x86,x64</AvailablePlatforms>
	</PropertyGroup>

	<PropertyGroup>
		<!-- Generates full paths for the 'File' property in errors, warnings and messages in many targets -->
		<GenerateFullPaths Condition="'$(GenerateFullPaths)' == ''">true</GenerateFullPaths>
		<!-- Yield optimization properties -->
		<YieldDuringToolExecution Condition="'$(YieldDuringToolExecution)' == ''">true</YieldDuringToolExecution>
	</PropertyGroup>

	<PropertyGroup>
		<TargetPlatformIdentifier Condition="'$(TargetPlatformIdentifier)' == '' AND '$(_EnableDefaultWindowsPlatform)' != 'false'">Windows</TargetPlatformIdentifier>
		<TargetPlatformVersion Condition="'$(TargetPlatformVersion)' == '' AND '$(_EnableDefaultWindowsPlatform)' != 'false'">7.0</TargetPlatformVersion>
		<TargetPlatformSdkPath Condition="'$(TargetPlatformSdkPath)' == '' AND '$(TargetPlatformSdkRootOverride)' != ''">$(TargetPlatformSdkRootOverride)\</TargetPlatformSdkPath>
		<TargetPlatformSdkPath Condition="'$(TargetPlatformSdkPath)' == '' AND '$(TargetPlatformIdentifier)' == 'Windows' AND $([MSBuild]::IsOSPlatform('Windows')) AND '$(MSBuildRuntimeType)' != 'Core'">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\Software\Microsoft\Microsoft SDKs\Windows\v$(TargetPlatformVersion)', InstallationFolder, null, RegistryView.Registry32, RegistryView.Default))</TargetPlatformSdkPath>
		<TargetPlatformSdkPath Condition="'$(TargetPlatformSdkPath)' == ''">$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation($(TargetPlatformIdentifier), $(TargetPlatformVersion)))</TargetPlatformSdkPath>
		<TargetPlatformSdkMetadataLocation Condition="'$(TargetPlatformSdkMetadataLocation)' == '' AND Exists('$(TargetPlatformSdkPath)')">$(TargetPlatformSdkPath)Windows Metadata</TargetPlatformSdkMetadataLocation>
		<TargetPlatformSdkMetadataLocation Condition="Exists('$(TargetPlatformSdkPath)') AND ('$(TargetPlatformSdkMetadataLocation)' == '' OR !Exists('$(TargetPlatformSdkMetadataLocation)'))">$(TargetPlatformSdkPath)References\CommonConfiguration\Neutral</TargetPlatformSdkMetadataLocation>
		<TargetPlatformWinMDLocation Condition="'$(TargetPlatformWinMDLocation)' == '' AND Exists('$(TargetPlatformSdkMetadataLocation)')">$(TargetPlatformSdkMetadataLocation)</TargetPlatformWinMDLocation>
		<UseOSWinMdReferences Condition="'$(UseOSWinMdReferences)' == '' AND ('$(TargetPlatformWinMDLocation)' == '' AND '$(TargetPlatformIdentifier)' == 'Windows' AND '$(TargetPlatformVersion)' > '7.0')">true</UseOSWinMdReferences>
		<TargetPlatformWinMDLocation Condition="'$(UseOsWinMdReferences)' == 'true'">$(WinDir)\System32\WinMetadata</TargetPlatformWinMDLocation>
		<TargetPlatformMoniker Condition="'$(TargetPlatformMoniker)' == '' AND '$(TargetPlatformIdentifier)' != '' AND '$(TargetPlatformVersion)' != ''">$(TargetPlatformIdentifier),Version=$(TargetPlatformVersion)</TargetPlatformMoniker>
		<TargetPlatformDisplayName Condition="'$(TargetPlatformDisplayName)' == '' AND '$(TargetPlatformIdentifier)' != '' AND '$(TargetPlatformVersion)' != ''">$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKDisplayName($(TargetPlatformIdentifier), $(TargetPlatformVersion)))</TargetPlatformDisplayName>
	</PropertyGroup>

	<!--
		Several properties must be set in the main project file, before using this .TARGETS file.
		However, if the properties are not set, we pick some defaults.

		Ensure any and all path property has a trailing slash, so it can be concatenated.
	-->

	<PropertyGroup>
		<BuildDirName Condition="'$(BuildDirName)' == ''">build</BuildDirName>
		<BuildDir Condition="'$(BuildDir)' == ''">$(BuildDirName)\</BuildDir>
		<BuildDir Condition="!HasTrailingSlash('$(BuildDir)')">$(BuildDir)\</BuildDir>
		<_InitialBuildDir>$(BuildDir)</_InitialBuildDir>
	</PropertyGroup>

	<PropertyGroup>
		<!-- Example, AnyCPU -->
		<Platform Condition="'$(Platform)' == ''">AnyCPU</Platform>
		<!-- Example, Debug -->
		<Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
	</PropertyGroup>

	<PropertyGroup>
		<!-- Generate Debug sysmbols only when the Configuration is Debug -->
		<DebugSymbols Condition="'$(Configuration)' == 'Debug' AND '$(DebugSymbols)' == '' AND '$(DebugType)' == ''">true</DebugSymbols>

		<!-- Whether or not a .pdb file is produced. -->
		<DebugType Condition="'$(DebugType)' == ''">portable</DebugType>

		<!-- Whether or not a .xml file is produced. -->
		<DocumentationFile Condition="'$(DocumentationFile)' == ''">false</DocumentationFile>

		<!-- Whether or not a reference assembly is produced. -->
		<ProduceReferenceAssembly Condition="'$(ProduceReferenceAssembly)' == ''">false</ProduceReferenceAssembly>
	</PropertyGroup>

	<!--
		For Legacy projects that define properties per Configuration/Platform combination, the validity of an
		invalid combination is determined by the non-empty value of the 'OutputPath' property specified under
		the IDE generated Configuration/Platform specific 'PropertyGroup' section.

		If 'BaseOutputPath' is specified, we can skip the validation, since, we assume the 'OutputPath' property
		will be derived (i.e. from the 'BaseOutputPath' property).
	-->
	<PropertyGroup Condition="'$(BaseOutputPathWasSpecified)' != 'true' AND '$(_OutputPathWasMissing)' == 'true'">
		<!--
			When 'OutputPath' is missing or empty (along with non-existent 'BaseOutputPath') at this point means,
			we're in legacy mode and we shall assume the current Configuration/Platform combination as invalid.
			Whether this is considered an error or a warning depends on the value of $(SkipInvalidConfigurations).
		-->
		<_InvalidConfigurationError Condition="'$(SkipInvalidConfigurations)' != 'true'">true</_InvalidConfigurationError>
		<_InvalidConfigurationWarning Condition="'$(SkipInvalidConfigurations)' == 'true'">true</_InvalidConfigurationWarning>
	</PropertyGroup>

	<!--
		IDE Macros available from both integrated builds and from command line builds.
		The following properties are 'macros' that are available via IDE for
		pre and post build steps.
	-->
	<PropertyGroup>
		<!-- Example, MyAssembly -->
		<AssemblyName Condition="'$(AssemblyName)' == ''">$(MSBuildProjectName)</AssemblyName>
		<!-- Example, MyProject.csproj -->
		<ProjectFileName Condition="'$(ProjectFileName)' == ''">$(MSBuildProjectFile)</ProjectFileName>
		<!-- Example, MyProject -->
		<ProjectName Condition="'$(ProjectName)' == ''">$(MSBuildProjectName)</ProjectName>
		<!-- Example, .csproj -->
		<ProjectExt Condition="'$(ProjectExt)' == ''">$(MSBuildProjectExtension)</ProjectExt>
		<!-- Example, C:\MyProjects\MyProject\ -->
		<ProjectDir Condition="'$(ProjectDir)' == ''">$(MSBuildProjectDirectory)\</ProjectDir>
		<!-- Example, C:\MyProjects\MyProject\MyProject.csproj -->
		<ProjectPath Condition="'$(ProjectPath)' == ''">$(ProjectDir)$(ProjectFileName)</ProjectPath>
		<ProjectPath Condition="'$(ProjectPath)' == ''">$(MSBuildProjectFullPath)</ProjectPath>
	</PropertyGroup>

	<PropertyGroup>
		<MaxTargetPath Condition="'$(MaxTargetPath)' == ''">100</MaxTargetPath>
	</PropertyGroup>

	<PropertyGroup>
		<!--
			By default, GenerateApplicationManifest puts all satellite assemblies to the manifest
			record by default by setting TargetCulture to *.
		-->
		<TargetCulture Condition="'$(TargetCulture)' == ''">*</TargetCulture>
		<FallbackCulture Condition="'$(UICulture)' != '' AND '$(FallbackCulture)' == ''">$(UICulture)</FallbackCulture>
	</PropertyGroup>

	<ItemGroup>
		<!-- Not used any more-->
		<_OutputPathItem Include="$(OutDir)"/>

		<_UnmanagedRegistrationCache Include="$(BaseIntermediateOutputPath)$(MSBuildProjectFile).UnmanagedRegistration.cache"/>
		<_ResolveComReferenceCache Include="$(IntermediateOutputPath)$(MSBuildProjectFile).ResolveComReference.cache"/>
	</ItemGroup>

	<ItemGroup>
		<!-- This is not used here but remains for backwards compatibility -->
		<AppConfigFileDestination Include="$(OutDir)$(TargetFileName).config"/>
	</ItemGroup>

	<!--
		IDE Macros available only from integrated builds.
		The following properties are 'macros' that are available via IDE for
		pre and post build steps. However, they are not defined when directly building
		a project from the command line, only when building a solution.
	-->
	<PropertyGroup>
		<DevEnvDir Condition="'$(DevEnvDir)' == ''">*Undefined*</DevEnvDir>
		<!-- Example, MySolution -->
		<SolutionName Condition="'$(SolutionName)' == ''">*Undefined*</SolutionName>
		<!-- Example, MySolution.sln -->
		<SolutionFileName Condition="'$(SolutionFileName)' == ''">*Undefined*</SolutionFileName>
		<!-- Example, F:\MySolutions\MySolution\MySolution.sln -->
		<SolutionPath Condition="'$(SolutionPath)' == ''">*Undefined*</SolutionPath>
		<!-- Example, F:\MySolutions\MySolution\ -->
		<SolutionDir Condition="'$(SolutionDir)' == ''">*Undefined*</SolutionDir>
		<!-- Example, .sln -->
		<SolutionExt Condition="'$(SolutionExt)' == ''">*Undefined*</SolutionExt>
	</PropertyGroup>

	<PropertyGroup>
		<!-- It would be a breaking change to automatically turn on binding redirects for existing projects, so turn them on only when opting into a new framework. -->
		<AutoGenerateBindingRedirects Condition="'$(AutoGenerateBindingRedirects)' == '' AND '$(TargetFrameworkIdentifier)' == '.NETFramework' AND '$(TargetFrameworkVersion.TrimStart(vV))' >= '4.7.2'">true</AutoGenerateBindingRedirects>
	</PropertyGroup>

	<PropertyGroup Condition="'$(AutoUnifyAssemblyReferences)' == ''">
		<AutoUnifyAssemblyReferences>true</AutoUnifyAssemblyReferences>
		<AutoUnifyAssemblyReferences Condition="'$(GenerateBindingRedirectsOutputType)' == 'true' AND '$(AutoGenerateBindingRedirects)' != 'true'">false</AutoUnifyAssemblyReferences>
	</PropertyGroup>

	<PropertyGroup>
		<CleanFile Condition="'$(CleanFile)' == ''">$(MSBuildProjectFile).FileListAbsolute.txt</CleanFile>
		<!-- During DesignTime Builds, skip project reference build as Design time is only queueing information.-->
		<BuildProjectReferences Condition="'$(BuildProjectReferences)' == '' AND '$(DesignTimeBuild)' == 'true'">false</BuildProjectReferences>
		<!-- By default we will build (and if applicable, clean) all project references. But this can be used to disable that-->
		<BuildProjectReferences Condition="'$(BuildProjectReferences)' == ''">true</BuildProjectReferences>
		<BuildInParallel Condition="'$(BuildInParallel)' == ''">true</BuildInParallel>
		<_ResolveReferenceDependencies Condition="'$(_ResolveReferenceDependencies)' == ''">false</_ResolveReferenceDependencies>
		<_GetChildProjectCopyToOutputDirectoryItems Condition="'$(_GetChildProjectCopyToOutputDirectoryItems)' == ''">true</_GetChildProjectCopyToOutputDirectoryItems>
		<OverwriteReadOnlyFiles Condition="'$(OverwriteReadOnlyFiles)' == ''">false</OverwriteReadOnlyFiles>
		<ComReferenceNoClassMembers Condition="'$(ComReferenceNoClassMembers)' == ''">false</ComReferenceNoClassMembers>
	</PropertyGroup>

	<ItemGroup>
		<IntermediateAssembly Include="$(IntermediateOutputPath)$(TargetName)$(TargetExt)"/>
		<FinalDocFile Include="@(DocFileItem->'$(OutDir)%(Filename)%(Extension)')"/>
		<CopyUpToDateMarker Include="$([MSBuild]::NormalizePath('$(MSBuildProjectDirectory)', '$(IntermediateOutputPath)', '$(MSBuildProjectFile).CopyComplete'))"/>
	</ItemGroup>

	<ItemGroup Condition="'$(ProduceReferenceAssembly)' == 'true'">
		<IntermediateRefAssembly Include="$(IntermediateOutputPath)ref\$(TargetName)$(TargetExt)" Condition="'@(IntermediateRefAssembly)' == ''"/>
		<CreateDirectory Include="@(IntermediateRefAssembly->'%(RootDir)%(Directory)')"/>
		<CreateDirectory Include="$(OutDir)ref"/>
	</ItemGroup>

	<ItemGroup Condition="'$(_DebugSymbolsProduced)' == 'true'">
		<_DebugSymbolsIntermediatePath Include="$(IntermediateOutputPath)$(TargetName).compile.pdb" Condition="'$(OutputType)' == 'winmdobj' AND '@(_DebugSymbolsIntermediatePath)' == ''"/>
		<_DebugSymbolsIntermediatePath Include="$(IntermediateOutputPath)$(TargetName).pdb" Condition="'$(OutputType)' != 'winmdobj' AND '@(_DebugSymbolsIntermediatePath)' == ''"/>
		<_DebugSymbolsOutputPath Include="@(_DebugSymbolsIntermediatePath->'$(OutDir)%(Filename)%(Extension)')"/>
	</ItemGroup>

	<ItemGroup>
		<!-- Create an item for entry point of the ClickOnce application (Example: WindowsApplication1.exe) -->
		<_DeploymentManifestEntryPoint Include="@(IntermediateAssembly)">
			<TargetPath>$(TargetFileName)</TargetPath>
		</_DeploymentManifestEntryPoint>

		<!-- Create an item for the application icon if one exists in the project (Example: app.ico) -->
		<!-- NOTE: The item Include and the Exists function are operating relative to the PROJECT (.csproj, .vbproj etc.) directory in this case -->
		<_DeploymentManifestIconFile Include="$(ApplicationIcon)" Condition="Exists('$(ApplicationIcon)')">
			<TargetPath>$(ApplicationIcon)</TargetPath>
		</_DeploymentManifestIconFile>

		<!-- Create an item for the output application manifest (Example: WindowsApplication1.exe.manifeset) -->
		<ApplicationManifest Include="$(IntermediateOutputPath)$(_DeploymentTargetApplicationManifestFileName)">
			<TargetPath>$(_DeploymentTargetApplicationManifestFileName)</TargetPath>
		</ApplicationManifest>

		<!--
			Create an item for the final application manifest (Example: WindowsApplication1.exe.manifeset)
			This item represents the final output application manifest used for project-to-project
			references and for copying to the publish output location.
		-->
		<_ApplicationManifestFinal Include="$(OutDir)$(_DeploymentTargetApplicationManifestFileName)">
			<TargetPath>$(_DeploymentTargetApplicationManifestFileName)</TargetPath>
		</_ApplicationManifestFinal>

		<!-- Create an item for the output deploy manifest (Example: WindowsApplication1.application) -->
		<DeployManifest Include="$(IntermediateOutputPath)$(TargetDeployManifestFileName)">
			<TargetPath>$(TargetDeployManifestFileName)</TargetPath>
		</DeployManifest>

		<!-- Create an item for the intermediate trust info file -->
		<_DeploymentIntermediateTrustInfoFile Include="$(IntermediateOutputPath)$(TargetName).TrustInfo.xml" Condition="'$(TargetZone)' != ''"/>
	</ItemGroup>

	<!-- ProcessorArchitecture is the target processor architecture. -->
	<PropertyGroup Condition="'$(ProcessorArchitecture)' == ''">
		<!--
			If ProcessorArchitecture is not set, set it to PlatformTarget
			Note: if $(PlatformTarget) is also blank resolve assembly reference defaults to msil which is the
			desired behavior in this case
		-->
		<ProcessorArchitecture>$(PlatformTarget)</ProcessorArchitecture>

		<!--
			If Processor architecture is not set and PlatformTarget is a known target translate the
			PlatformTarget into something ResolveAssemblyReference knows about
		-->
		<ProcessorArchitecture Condition="'$(PlatformTarget)' == 'AnyCPU'">msil</ProcessorArchitecture>
		<ProcessorArchitecture Condition="'$(PlatformTarget)' == 'x64'">amd64</ProcessorArchitecture>
		<ProcessorArchitecture Condition="'$(PlatformTarget)' == 'Itanium'">ia64</ProcessorArchitecture>
		<ProcessorArchitecture Condition="'$(PlatformTarget)' == 'x86'">x86</ProcessorArchitecture>
		<ProcessorArchitecture Condition="'$(PlatformTarget)' == 'ARM'">arm</ProcessorArchitecture>
	</PropertyGroup>

	<PropertyGroup>
		<ConsiderPlatformAsProcessorArchitecture Condition="'$(ConsiderPlatformAsProcessorArchitecture)' == ''">true</ConsiderPlatformAsProcessorArchitecture>
	</PropertyGroup>

	<PropertyGroup Condition="'$(ProcessorArchitecture)' == '' AND '$(ConsiderPlatformAsProcessorArchitecture)' == 'true'">
		<!-- We need to do this here because if we were to just compare against platform visual would parse them out as available platforms which may not be the case -->
		<ProcessorArchitectureAsPlatform>$(Platform)</ProcessorArchitectureAsPlatform>
		<ProcessorArchitecture Condition="'$(ProcessorArchitectureAsPlatform)' == 'AnyCPU' OR '$(ProcessorArchitectureAsPlatform)' == 'Any CPU'">msil</ProcessorArchitecture>
		<ProcessorArchitecture Condition="'$(ProcessorArchitectureAsPlatform)' == 'x64' OR '$(ProcessorArchitectureAsPlatform)' == 'amd64'">amd64</ProcessorArchitecture>
		<ProcessorArchitecture Condition="'$(ProcessorArchitectureAsPlatform)' == 'Itanium'">ia64</ProcessorArchitecture>
		<ProcessorArchitecture Condition="'$(ProcessorArchitectureAsPlatform)' == 'x86' OR '$(ProcessorArchitectureAsPlatform)' == 'win32'">x86</ProcessorArchitecture>
		<ProcessorArchitecture Condition="'$(ProcessorArchitectureAsPlatform)' == 'ARM'">arm</ProcessorArchitecture>

		<!--
			For compatibility with the 4.0 behavior, if not set above, default to the environment. To override this, set ProcessorArchitecture explicitly.
			We also need to disable the warning since we do not know if what the environment is set to is correct
		-->
		<ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch Condition="'$(ProcessorArchitecture)' == ''">None</ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>
		<ProcessorArchitecture Condition="'$(ProcessorArchitecture)' == ''">$(PROCESSOR_ARCHITECTURE)</ProcessorArchitecture>
	</PropertyGroup>


	<!--
		Sensible defaults for the most-commonly-desired MSBuildRuntime and MSBuildArchitecture values. The Core and Mono runtimes do not currently support specifying task architecture or runtime.
		If support for out-of-proc task execution is added on other runtimes, make sure each task's logic is checked against the current state of support.
	-->
	<PropertyGroup Condition="'$(DisableOutOfProcTaskHost)' == '' AND '$(MSBuildRuntimeType)' == 'Full'">
		<TargetFrameworkAsMSBuildRuntime Condition="'$(TargetFrameworkVersion)' == 'v2.0' OR '$(TargetFrameworkVersion)' == 'v3.0' OR '$(TargetFrameworkVersion)' == 'v3.5'">CLR2</TargetFrameworkAsMSBuildRuntime>
		<TargetFrameworkAsMSBuildRuntime Condition="'$(TargetFrameworkVersion)' == 'v4.0' OR '$(TargetFrameworkVersion)' == 'v4.5'">CLR4</TargetFrameworkAsMSBuildRuntime>
		<TargetFrameworkAsMSBuildRuntime Condition="'$(TargetFrameworkAsMSBuildRuntime)' == ''">CurrentRuntime</TargetFrameworkAsMSBuildRuntime>

		<PlatformTargetAsMSBuildArchitectureExplicitlySet Condition="'$(PlatformTargetAsMSBuildArchitecture)' != ''">true</PlatformTargetAsMSBuildArchitectureExplicitlySet>
		<PlatformTargetAsMSBuildArchitectureExplicitlySet Condition="'$(PlatformTargetAsMSBuildArchitecture)' == ''">false</PlatformTargetAsMSBuildArchitectureExplicitlySet>

		<PlatformTargetAsMSBuildArchitecture Condition="'$(PlatformTarget)' == 'x86' OR '$(PlatformTarget)' == 'x64'">$(PlatformTarget)</PlatformTargetAsMSBuildArchitecture>
		<PlatformTargetAsMSBuildArchitecture Condition="'$(PlatformTarget)' == 'arm'">x86</PlatformTargetAsMSBuildArchitecture>
		<PlatformTargetAsMSBuildArchitecture Condition="'$(PlatformTarget)' == 'arm64'">x64</PlatformTargetAsMSBuildArchitecture>
		<PlatformTargetAsMSBuildArchitecture Condition="'$(PlatformTarget)' == 'ia64'">x64</PlatformTargetAsMSBuildArchitecture>
		<PlatformTargetAsMSBuildArchitecture Condition="'$(PlatformTargetAsMSBuildArchitecture)' == ''">CurrentArchitecture</PlatformTargetAsMSBuildArchitecture>
	</PropertyGroup>

	<!-- Flavor is the project flavor. For example, Client, Smart Devices, SQL Server, etc. -->
	<PropertyGroup>
		<ProjectFlavor Condition="'$(ProjectFlavor)' == ''">Client</ProjectFlavor>
	</PropertyGroup>

	<!--
		The default for compilers is to not delay-sign. If $(DelaySign) is false, let the compiler
		use its default rather than forcing a no-delay-sign flag to be passed in. This is so that
		attributes in the source code can override this decision.
	-->
	<PropertyGroup>
		<DelaySign Condition="'$(SignAssembly)' != 'true'">false</DelaySign>
		<DelaySign Condition="'$(DelaySign)' != 'true'"/>
	</PropertyGroup>

	<!-- These properties control web reference proxy generation. -->
	<PropertyGroup>
		<WebReference_EnableProperties Condition="'$(WebReference_EnableProperties)' == ''">true</WebReference_EnableProperties>
		<WebReference_EnableSQLTypes Condition="'$(WebReference_EnableSQLTypes)' == ''">true</WebReference_EnableSQLTypes>
		<WebReference_EnableLegacyEventingModel Condition="'$(WebReference_EnableLegacyEventingModel)' == ''">false</WebReference_EnableLegacyEventingModel>
	</PropertyGroup>

	<!--
		These parameters control where to look in the registry for directories to search for
		assemblies in the assembly resolution tasks.
	-->
	<PropertyGroup>
		<AssemblyFoldersSuffix Condition="'$(AssemblyFoldersSuffix)' == ''">AssemblyFoldersEx</AssemblyFoldersSuffix>
		<FrameworkRegistryBase Condition="'$(FrameworkRegistryBase)' == ''">Software\Microsoft\$(TargetFrameworkIdentifier)</FrameworkRegistryBase>
		<TargetPlatformRegistryBase Condition="'$(TargetPlatformRegistryBase)' == ''">Software\Microsoft\Microsoft SDKs\$(TargetPlatformIdentifier)</TargetPlatformRegistryBase>
		<AssemblyFoldersConfigFile Condition="'$(AssemblyFoldersConfigFile)' == ''">$(MSBuildToolsPath)\AssemblyFolders.config</AssemblyFoldersConfigFile>
		<AssemblyFoldersConfigFileSearchPath Condition="Exists('$(AssemblyFoldersConfigFile)')">{AssemblyFoldersFromConfig:$(AssemblyFoldersConfigFile),$(TargetFrameworkVersion)};</AssemblyFoldersConfigFileSearchPath>

		<!--
			These are the extensions that assembly reference resolution will consider for resolution.
			Add new extensions here if you want to add new file types to consider (for example, .metadata_dll).
			Put the most likely extensions first for reference resolution speed.
		-->
		<AllowedReferenceAssemblyFileExtensions Condition="'$(AllowedReferenceAssemblyFileExtensions)' == ''">
			.winmd;.dll;.exe
		</AllowedReferenceAssemblyFileExtensions>

		<!--
			These are the extensions that reference resolution will consider when looking for files related
			to resolved references.  Add new extensions here if you want to add new file types to consider.
		-->
		<AllowedReferenceRelatedFileExtensions Condition="'$(AllowedReferenceRelatedFileExtensions)' == ''">
			.pdb;.xml;.pri;.dll.config;.exe.config
		</AllowedReferenceRelatedFileExtensions>

		<!--
			These names are used when determining which TargetFramework subset to use. If the any of the FullReferenceAssemblyNames
			are seen in the list of client subsets, RAR will assume that no client subset is being used. The list is semicolon seperated
			For example :   Full;Complete;AllThere
		-->
		<FullReferenceAssemblyNames Condition="'$(FullReferenceAssemblyNames)' == ''">Full</FullReferenceAssemblyNames>
	</PropertyGroup>

	<!--
		ContinueOnError takes 3 values:  WarnAndContinue (true), ErrorAndStop (false), and ErrorAndContinue.
		Default to ErrorAndStop, since that matches the behaviour in previous versions, and what users typically expect
	-->
	<PropertyGroup>
		<ContinueOnError Condition="'$(ContinueOnError)' == ''">false</ContinueOnError>
	</PropertyGroup>

	<!-- Users familiar with how some other repos work try to use NoWarn with MSBuild in place of MSBuildWarningsAsMessages. -->
	<PropertyGroup>
		<MSBuildWarningsAsMessages Condition="'$(MSBuildWarningsAsMessages)' == ''">$(NoWarn)</MSBuildWarningsAsMessages>
		<MSBuildWarningsAsErrors Condition="'$(MSBuildWarningsAsErrors)' == ''">$(WarningsAsErrors)</MSBuildWarningsAsErrors>
	</PropertyGroup>

	<!-- Common Project System support -->
	<PropertyGroup>
		<CommonXamlResourcesDirectory Condition="'$(CommonXamlResourcesDirectory)' == ''">$(MSBuildToolsPath)\$(LangName)\</CommonXamlResourcesDirectory>
	</PropertyGroup>

	<!-- We need to fallback to en-US in case the xaml rules are not localized (possibly happen on community languages).  -->
	<PropertyGroup Condition="!Exists('$(CommonXamlResourcesDirectory)')">
		<CommonXamlResourcesDirectory>$(MSBuildToolsPath)\en-US\</CommonXamlResourcesDirectory>
	</PropertyGroup>

	<ItemGroup Condition="'$(DefineCommonItemSchemas)' == 'true'">
		<PropertyPageSchema Include="$(CommonXamlResourcesDirectory)ProjectItemsSchema.xaml"/>

		<PropertyPageSchema Include="
			$(CommonXamlResourcesDirectory)General.xaml;
			$(CommonXamlResourcesDirectory)Debugger_General.xaml">
			<Context>Project</Context>
		</PropertyPageSchema>

		<PropertyPageSchema Include="$(CommonXamlResourcesDirectory)General.BrowseObject.xaml">
			<Context>BrowseObject</Context>
		</PropertyPageSchema>

		<PropertyPageSchema Include="$(CommonXamlResourcesDirectory)General_File.xaml">
			<Context>File</Context>
		</PropertyPageSchema>

		<PropertyPageSchema Include="$(CommonXamlResourcesDirectory)SCC.xaml">
			<Context>Invisible</Context>
		</PropertyPageSchema>

		<PropertyPageSchema Include="
			$(CommonXamlResourcesDirectory)Folder.xaml;
			$(CommonXamlResourcesDirectory)None.xaml;
			$(CommonXamlResourcesDirectory)Content.xaml;
			$(CommonXamlResourcesDirectory)EmbeddedResource.xaml">
			<Context>File;BrowseObject</Context>
		</PropertyPageSchema>

		<PropertyPageSchema Include="$(CommonXamlResourcesDirectory)SpecialFolder.xaml">
			<Context>File;ProjectSubscriptionService</Context>
		</PropertyPageSchema>
	</ItemGroup>

	<PropertyGroup>
		<DefineCommonReferenceSchemas Condition="'$(DefineCommonReferenceSchemas)' == ''">$(DefineCommonItemSchemas)</DefineCommonReferenceSchemas>
	</PropertyGroup>

	<ItemGroup Condition="'$(DefineCommonReferenceSchemas)' == 'true'">
		<!-- Assembly references -->
		<PropertyPageSchema Include="$(CommonXamlResourcesDirectory)assemblyreference.xaml">
			<Context>BrowseObject</Context>
		</PropertyPageSchema>
		<PropertyPageSchema Include="$(CommonXamlResourcesDirectory)ResolvedAssemblyReference.xaml">
			<Context>ProjectSubscriptionService;BrowseObject</Context>
		</PropertyPageSchema>

		<!-- COM references -->
		<PropertyPageSchema Include="$(CommonXamlResourcesDirectory)COMReference.xaml">
			<Context>BrowseObject</Context>
		</PropertyPageSchema>
		<PropertyPageSchema Include="$(CommonXamlResourcesDirectory)ResolvedCOMReference.xaml">
			<Context>ProjectSubscriptionService;BrowseObject</Context>
		</PropertyPageSchema>

		<!-- Project references -->
		<PropertyPageSchema Include="$(CommonXamlResourcesDirectory)ProjectReference.xaml">
			<Context>BrowseObject</Context>
		</PropertyPageSchema>
		<PropertyPageSchema Include="$(CommonXamlResourcesDirectory)ResolvedProjectReference.xaml">
			<Context>ProjectSubscriptionService;BrowseObject</Context>
		</PropertyPageSchema>
	</ItemGroup>

	<ItemGroup Condition="'$(DefineCommonCapabilities)' == 'true'">
		<ProjectCapability Include="
			AssemblyReferences;
			COMReferences;
			ProjectReferences;
			SharedProjectReferences;
			OutputGroups;
			AllTargetOutputGroups;
			VisualStudioWellKnownOutputGroups;
			SingleFileGenerators;
			DeclaredSourceItems;
			UserSourceItems"/>
		<ProjectCapability Include="BuildWindowsDesktopTarget"
			Condition="'$(TargetPlatformIdentifier)' == 'Windows' AND '$(TargetPlatformVersion)' &lt; '8.0'"/>
	</ItemGroup>

	<ItemDefinitionGroup Condition="'$(DefineExplicitDefaults)' == 'true'">
		<None>
			<CopyToOutputDirectory>Never</CopyToOutputDirectory>
		</None>
		<Content>
			<CopyToOutputDirectory>Never</CopyToOutputDirectory>
		</Content>
		<Compile>
			<CopyToOutputDirectory>Never</CopyToOutputDirectory>
		</Compile>
		<EmbeddedResource>
			<CopyToOutputDirectory>Never</CopyToOutputDirectory>
		</EmbeddedResource>
	</ItemDefinitionGroup>

</Project>