<Project DefaultTargets="Build">

	<Import Project="$(CustomBeforeMicrosoftCommonCrossTargetingTargets)" Condition="Exists('$(CustomBeforeMicrosoftCommonCrossTargetingTargets)')"/>

	<PropertyGroup>
		<BuildInParallel Condition="'$(BuildInParallel)' == ''">true</BuildInParallel>
	</PropertyGroup>

	<Target Name="GetTargetFrameworks"
			DependsOnTargets="GetTargetFrameworksWithPlatformFromInnerBuilds"
			Returns="@(_ThisProjectBuildMetadata)">

		<CombineXmlElements
			RootElementName="AdditionalProjectProperties"
			XmlElements="@(_TargetFrameworkInfo->'%(AdditionalPropertiesFromProject)')">
			<Output TaskParameter="Result"
					PropertyName="_AdditionalPropertiesFromProject"/>
		</CombineXmlElements>

		<ItemGroup>
			<_ThisProjectBuildMetadata Include="$(MSBuildProjectFullPath)">
				<TargetFrameworks>@(_TargetFrameworkInfo)</TargetFrameworks>
				<TargetFrameworkMonikers>@(_TargetFrameworkInfo->'%(TargetFrameworkMonikers)')</TargetFrameworkMonikers>
				<TargetPlatformMonikers>@(_TargetFrameworkInfo->'%(TargetPlatformMonikers)')</TargetPlatformMonikers>
				<AdditionalPropertiesFromProject>$(_AdditionalPropertiesFromProject)</AdditionalPropertiesFromProject>
				<HasSingleTargetFramework>false</HasSingleTargetFramework>
				<!-- indicate to caller that project is RID agnostic so that a global property RuntimeIdentifier value can be removed -->
				<IsRidAgnostic>false</IsRidAgnostic>
				<IsRidAgnostic Condition="'$(RuntimeIdentifier)' == '' AND '$(RuntimeIdentifiers)' == ''">true</IsRidAgnostic>
				<!-- Extract necessary information for SetPlatform negotiation -->
				<!-- This target does not run for cpp projects. -->
				<IsVcxOrNativeProj>false</IsVcxOrNativeProj>
				<Platforms>$(Platforms)</Platforms>
			</_ThisProjectBuildMetadata>
		</ItemGroup>
	</Target>

	<Target Name="_ComputeTargetFrameworkItems" Returns="@(InnerOutput)">
		<ItemGroup>
			<_TargetFrameworkRaw Include="$(TargetFrameworks)"/>
			<!-- Make normalization explicit: Trim; Deduplicate by keeping first occurrence, case insensitive -->
			<_TargetFramework Include="@(_TargetFrameworkRaw->Trim()->Distinct())"/>
			<_InnerBuildProjects Include="$(MSBuildProjectFile)">
				<AdditionalProperties>TargetFramework=%(_TargetFramework.Identity)</AdditionalProperties>
			</_InnerBuildProjects>
		</ItemGroup>
	</Target>

	<Target Name="GetTargetFrameworksWithPlatformFromInnerBuilds"
			DependsOnTargets="_ComputeTargetFrameworkItems">

		<MSBuild Projects="@(_InnerBuildProjects)"
			Condition="'@(_InnerBuildProjects)' != ''"
			Targets="GetTargetFrameworksWithPlatformForSingleTargetFramework"
			BuildInParallel="$(BuildInParallel)">
			<Output ItemName="_TargetFrameworkInfo" TaskParameter="TargetOutputs"/>
		</MSBuild>
	</Target>

	<!--
	============================================================
						DispatchToInnerBuilds

		Builds this project with /t:$(InnerTarget) /p:TargetFramework=X for each
		value X in $(TargetFrameworks)

		[IN]
		$(TargetFrameworks) - Semicolon delimited list of target frameworks.
		$(InnerTargets) - The targets to build for each target framework

		[OUT]
		@(InnerOutput) - The combined output items of the inner targets across all
						 target frameworks.
	============================================================
	-->
	<Target Name="DispatchToInnerBuilds"
			DependsOnTargets="_ComputeTargetFrameworkItems"
			Returns="@(InnerOutput)">
		<!-- If this logic is changed, also update Clean -->
		<MSBuild Projects="@(_InnerBuildProjects)"
				 Condition="'@(_InnerBuildProjects)' != ''"
				 Targets="$(InnerTargets)"
				 BuildInParallel="$(BuildInParallel)">
			<Output ItemName="InnerOutput" TaskParameter="TargetOutputs"/>
		</MSBuild>
	</Target>

	<!--
	============================================================
								Build

	Multi-targeting version of Build.

	[IN]
	$(TargetFrameworks) - Semicolon delimited list of target frameworks.

	$(InnerTargets) - The targets to build for each target framework.
		Defaults to 'Build' if unset, but allows override to support
		`msbuild /p:InnerTargets=X;Y;Z` which will build X, Y & Z
		targets for each target framework.

	[OUT]
	@(InnerOutput) - The combined output items of the inner targets across all builds.
	============================================================
	-->
	<Target Name="Build" DependsOnTargets="_SetBuildInnerTarget;DispatchToInnerBuilds"/>

	<Target Name="_SetBuildInnerTarget" Returns="@(InnerOutput)">
		<PropertyGroup Condition="'$(InnerTargets)' == ''">
			<InnerTargets>Build</InnerTargets>
		</PropertyGroup>
	</Target>

	<!--
	============================================================
							Clean

	Multi-targeting version of clean.

	Inner-build dispatch is a clone of DispatchToInnerBuilds;
	the only reason it's replicated is that it must be a different
	target to be run in the same build.

	e.g. by Rebuild or by a /t:Clean;Build invocation.
	============================================================
	-->
	<Target Name="Clean"
			DependsOnTargets="_ComputeTargetFrameworkItems">
		<!-- If this logic is changed, also update DispatchToInnerBuilds -->
		<MSBuild Projects="@(_InnerBuildProjects)"
				 Condition="'@(_InnerBuildProjects)' != ''"
				 Targets="Clean"
				 BuildInParallel="$(BuildInParallel)"/>
	</Target>

	<!--
	============================================================
							Rebuild

	Multi-targeting version of rebuild.
	============================================================
	-->
	<Target Name="Rebuild" DependsOnTargets="Clean;Build"/>

	<!--
	============================================================
								Publish

	Multi-targeting version of Publish.

	[IN]
	$(TargetFrameworks) - Semicolon delimited list of target frameworks.

	$(InnerTargets) - The targets to publish for each target framework.
		Defaults to 'Publish' if unset, but allows override to support
		`msbuild /p:InnerTargets=X;Y;Z` which will build X, Y & Z
		targets for each target framework.

	[OUT]
	@(InnerOutput) - The combined output items of the inner targets across all builds.
	============================================================
	-->
	<Target Name="Publish" DependsOnTargets="_SetPublishInnerTarget;DispatchToInnerBuilds"/>

	<Target Name="_SetPublishInnerTarget" Returns="@(InnerOutput)">
		<PropertyGroup Condition="'$(InnerTargets)' == ''">
			<InnerTargets>Publish</InnerTargets>
		</PropertyGroup>
	</Target>

	<PropertyGroup>
		<VSTestTargets Condition="'$(VSTestTargets)' == ''">$(MSBuildExtensionsPath)\Microsoft.TestPlatform.CrossTargeting.targets</VSTestTargets>
		<VSTestTargets Condition="!Exists('$(VSTestTargets)')">$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\$(MSBuildThisFile)\ImportAfter\Microsoft.TestPlatform.CrossTargeting.targets</VSTestTargets>
	</PropertyGroup>

	<Import Project="$(VSTestTargets)" Condition="Exists('$(VSTestTargets)')"/>

	<Import Project="$(CustomAfterMicrosoftCommonCrossTargetingTargets)" Condition="Exists('$(CustomAfterMicrosoftCommonCrossTargetingTargets)')"/>

</Project>